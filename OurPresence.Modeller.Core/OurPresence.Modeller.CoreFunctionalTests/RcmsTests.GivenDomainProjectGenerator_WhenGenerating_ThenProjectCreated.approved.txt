file[0] = Nhvr.Rcms.Common.csproj
<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net5.0</TargetFramework>
        <RootNamespace>Nhvr.Rcms.Common</RootNamespace>
        <LangVersion>Preview</LangVersion>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="CSharpFunctionalExtensions" Version="2.18.0" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\Nhvr.Rcms.Core\Nhvr.Rcms.Core.csproj" />
    </ItemGroup>

</Project>

file[1] = Entity.cs
namespace Nhvr.Rcms.Common
{
    public abstract class Entity<TId>
    {
        public virtual TId Id { get; protected set; }

        protected Entity()
        {
        }

        protected Entity(TId id)
        {
            Id = id;
        }

        public override bool Equals(object? obj)
        {
            if (!(obj is Entity<TId> other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return ValueObject.GetUnproxiedType(this) != ValueObject.GetUnproxiedType(other)
                ? false
                : Id.Equals(default(TId)) || other.Id.Equals(default(TId)) ? false : Id.Equals(other.Id);
        }

        public static bool operator ==(Entity<TId> a, Entity<TId> b)
        {
            return a is null && b is null ? true : a is null || b is null ? false : a.Equals(b);
        }

        public static bool operator !=(Entity<TId> a, Entity<TId> b)
        {
            return !(a == b);
        }

        public override int GetHashCode()
        {
            return (ValueObject.GetUnproxiedType(this)?.ToString() + Id).GetHashCode();
        }
    }

    public abstract class Entity : Entity<long>
    {
        protected Entity()
        {
        }

        protected Entity(long id)
            : base(id)
        {
        }
    }
}

file[2] = EnumValueObject.cs
namespace Nhvr.Rcms.Common
{
    public abstract class EnumValueObject<TEnumeration, TId> : ValueObject
            where TEnumeration : EnumValueObject<TEnumeration, TId>
            where TId : struct
    {
        private static readonly Dictionary<TId, TEnumeration> EnumerationsById = GetEnumerations().ToDictionary(e => e.Id);
        private static readonly Dictionary<string, TEnumeration> EnumerationsByName = GetEnumerations().ToDictionary(e => e.Name);

        protected EnumValueObject(TId id, string name)
        {
            if (string.IsNullOrWhiteSpace(name))
            {
                throw new ArgumentException("The name cannot be null or empty");
            }

            Id = id;
            Name = name;
        }

        public TId Id { get; protected set; }

        public string Name { get; protected set; }

        public static bool operator ==(EnumValueObject<TEnumeration, TId> a, TId b)
        {
            return a is null ? false : a.Id.Equals(b);
        }

        public static bool operator !=(EnumValueObject<TEnumeration, TId> a, TId b)
        {
            return !(a == b);
        }

        public static bool operator ==(TId a, EnumValueObject<TEnumeration, TId> b)
        {
            return b == a;
        }

        public static bool operator !=(TId a, EnumValueObject<TEnumeration, TId> b)
        {
            return !(b == a);
        }

        public static Maybe<TEnumeration?> FromId(TId id)
        {
            return EnumerationsById.ContainsKey(id)
                ? EnumerationsById[id]
                : null;
        }

        public static Maybe<TEnumeration?> FromName(string name)
        {
            return EnumerationsByName.ContainsKey(name)
                ? EnumerationsByName[name]
                : null;
        }

        protected override IEnumerable<object> GetEqualityComponents()
        {
            yield return Id;
        }

        private static TEnumeration?[] GetEnumerations()
        {
            var enumerationType = typeof(TEnumeration);

            return enumerationType
                .GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly)
                .Where(info => info.FieldType == typeof(TEnumeration))
                .Select(info => (TEnumeration?)info.GetValue(null))
                .ToArray();
        }
    }

    public abstract class EnumValueObject<TEnumeration> : ValueObject
        where TEnumeration : EnumValueObject<TEnumeration>
    {
        private static readonly Dictionary<string, TEnumeration> Enumerations = GetEnumerations().ToDictionary(e => e.Id);

        protected EnumValueObject(string id)
        {
            if (string.IsNullOrWhiteSpace(id))
            {
                throw new ArgumentException("The enum key cannot be null or empty");
            }

            Id = id;
        }

        public static IEnumerable<TEnumeration> All = Enumerations.Values;

        public virtual string Id { get; protected set; }

        public static bool operator ==(EnumValueObject<TEnumeration> a, string b)
        {
            return a is null && b is null ? true : a is null || b is null ? false : a.Id.Equals(b);
        }

        public static bool operator !=(EnumValueObject<TEnumeration> a, string b)
        {
            return !(a == b);
        }

        public static bool operator ==(string a, EnumValueObject<TEnumeration> b)
        {
            return b == a;
        }

        public static bool operator !=(string a, EnumValueObject<TEnumeration> b)
        {
            return !(b == a);
        }

        public static Maybe<TEnumeration?> FromId(string id)
        {
            return Enumerations.ContainsKey(id)
                ? Enumerations[id]
                : null;
        }

        public static bool Is(string possibleKey) => All.Select(e => e.Id).Contains(possibleKey);

        public override string ToString() => Id;

        protected override IEnumerable<object> GetEqualityComponents()
        {
            yield return Id;
        }

        private static TEnumeration?[] GetEnumerations()
        {
            var enumerationType = typeof(TEnumeration);

            return enumerationType
                .GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly)
                .Where(info => info.FieldType == typeof(TEnumeration))
                .Select(info => (TEnumeration?)info.GetValue(null))
                .ToArray();
        }
    }
}

file[3] = SimpleValueObject.cs
namespace Nhvr.Rcms.Common
{
    public abstract class SimpleValueObject<T> : ValueObject
    {
        public T Value { get; }

        protected SimpleValueObject(T value)
        {
            Value = value;
        }

        protected override IEnumerable<object> GetEqualityComponents()
        {
            yield return Value is null ? new List<object>() : Value;
        }

        public override string? ToString()
        {
            return Value?.ToString();
        }

        public static implicit operator T?(SimpleValueObject<T> valueObject)
        {
            return valueObject is null ? default : valueObject.Value;
        }
    }
}

file[4] = ValueObject.cs
namespace Nhvr.Rcms.Common
{
    [Serializable]
    public abstract class ValueObject<T>
            where T : ValueObject<T>
    {
        private int? _cachedHashCode;

        public override bool Equals(object? obj)
        {
            return obj is T valueObject && ValueObject.GetUnproxiedType(this) == ValueObject.GetUnproxiedType(obj) && EqualsCore(valueObject);
        }

        protected abstract bool EqualsCore(T other);

        public override int GetHashCode()
        {
            if (!_cachedHashCode.HasValue)
            {
                _cachedHashCode = GetHashCodeCore();
            }
            return _cachedHashCode.Value;
        }

        protected abstract int GetHashCodeCore();

        public static bool operator ==(ValueObject<T> a, ValueObject<T> b)
        {
            return a is null && b is null || a is not null && b is not null && a.Equals(b);
        }

        public static bool operator !=(ValueObject<T> a, ValueObject<T> b)
        {
            return !(a == b);
        }
    }

    public abstract class ValueObject : IComparable, IComparable<ValueObject>
    {
        private int? _cachedHashCode;

        protected abstract IEnumerable<object> GetEqualityComponents();

        public override bool Equals(object? obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (GetUnproxiedType(this) != GetUnproxiedType(obj))
            {
                return false;
            }

            var valueObject = (ValueObject)obj;

            return GetEqualityComponents().SequenceEqual(valueObject.GetEqualityComponents());
        }

        public override int GetHashCode()
        {
            if (!_cachedHashCode.HasValue)
            {
                _cachedHashCode = GetEqualityComponents()
                    .Aggregate(1, (current, obj) =>
                    {
                        unchecked
                        {
                            return current * 23 + (obj?.GetHashCode() ?? 0);
                        }
                    });
            }

            return _cachedHashCode.Value;
        }

        public virtual int CompareTo(object? obj)
        {
            var thisType = GetUnproxiedType(this);
            var otherType = GetUnproxiedType(obj);

            if (thisType != otherType)
            {
                return string.Compare(thisType?.ToString(), otherType?.ToString(), StringComparison.Ordinal);
            }

            var other = obj as ValueObject;
            var components = GetEqualityComponents().ToArray();
            var otherComponents = other?.GetEqualityComponents().ToArray();

            for (var i = 0; i < components.Length; i++)
            {
                var comparison = CompareComponents(components[i], otherComponents?[i]);
                if (comparison != 0)
                {
                    return comparison;
                }
            }

            return 0;
        }

        private static int CompareComponents(object? object1, object? object2)
        {
            return object1 is null && object2 is null
                ? 0
                : object1 is null
                ? -1
                : object2 is null
                ? 1
                : object1 is IComparable comparable1 && object2 is IComparable comparable2
                ? comparable1.CompareTo(comparable2)
                : object1.Equals(object2) ? 0 : -1;
        }

        public virtual int CompareTo(ValueObject? other)
        {
            return CompareTo(other as object);
        }

        public static bool operator ==(ValueObject a, ValueObject b)
        {
            return a is null && b is null || a is not null && b is not null && a.Equals(b);
        }

        public static bool operator !=(ValueObject a, ValueObject b)
        {
            return !(a == b);
        }

        internal static Type? GetUnproxiedType(object? obj)
        {
            const string EFCoreProxyPrefix = "Castle.Proxies.";
            const string NHibernateProxyPostfix = "Proxy";

            if (obj is null) return null;

            var type = obj.GetType();
            var typeString = type.ToString();

            return typeString.Contains(EFCoreProxyPrefix) || typeString.EndsWith(NHibernateProxyPostfix) ? type.BaseType : type;
        }
    }
}

file[5] = Error.cs
namespace Nhvr.Rcms.Common
{
    public sealed class Error : ValueObject
    {
        private const string Separator = "||";

        public string Code { get; }
        public string Message { get; }

        internal Error(string code, string message)
        {
            Code = code;
            Message = message;
        }

        protected override IEnumerable<object> GetEqualityComponents()
        {
            yield return Code;
        }

        public string Serialize()
        {
            return $"{Code}{Separator}{Message}";
        }

        public static Error Deserialize(string serialized)
        {
            if (serialized == "A non-empty request body is required.")
            {
                return Errors.General.ValueIsRequired();
            }

            var data = serialized.Split(new[] { Separator }, StringSplitOptions.RemoveEmptyEntries);

            return data.Length < 2 ? throw new Exception($"Invalid error serialization: '{serialized}'") : new Error(data[0], data[1]);
        }
    }

    public static class Errors
    {
        public static class Vehicle
        {
            public static Error InvalidSearch(string error)
            {
                return new Error("invalid.vehicle.search", $"Invalid vehicle search. {error}");
            }
        }

        public static class General
        {
            public static Error NotFound(long? id = null)
            {
                var forId = id == null ? "" : $" for Id '{id}'";
                return new Error("record.not.found", $"Record not found{forId}");
            }

            public static Error ValueIsInvalid() =>
                new Error("value.is.invalid", "Value is invalid");

            public static Error ValueIsRequired() =>
                new Error("value.is.required", "Value is required");

            public static Error InvalidLength(string? name = default)
            {
                var label = name == null ? " " : " " + name + " ";
                return new Error("invalid.string.length", $"Invalid{label}length");
            }

            public static Error CollectionIsTooSmall(int min, int current)
            {
                return new Error(
                    "collection.is.too.small",
                    $"The collection must contain {min} items or more. It contains {current} items.");
            }

            public static Error CollectionIsTooLarge(int max, int current)
            {
                return new Error(
                    "collection.is.too.large",
                    $"The collection must contain {max} items or more. It contains {current} items.");
            }

            public static Error InternalServerError(string message)
            {
                return new Error("internal.server.error", message);
            }
        }
    }
}

file[6] = .filenesting.json
{
    "help": "https://go.microsoft.com/fwlink/?linkid=866610",
    "root": false,

    "dependentFileProviders": {
        "add": { 
            "pathSegment": {
                "add": {
                    ".*": [
                        ".cs"
                    ]
                }
            }
        }
    }
}

file[7] = usings.cs
global using CSharpFunctionalExtensions;
global using System;
global using System.Collections.Generic;
global using System.ComponentModel.DataAnnotations;
global using System.Linq;
global using System.Reflection;
global using System.Text.RegularExpressions;
global using System.Threading.Tasks;
global using Nhvr.Rcms.Common.Enums;
global using Nhvr.Rcms.Core.Aggregates;

file[8] = Domain\Email.cs
namespace Nhvr.Rcms.Common.Domain
{
    public class Email : ValueObject
    {
        public string Value { get; }

        private Email(string value)
        {
            Value = value;
        }

        public static Result<Email, Error> Create(string input)
        {
            if (string.IsNullOrWhiteSpace(input))
            {
                return Errors.General.ValueIsRequired();
            }

            var email = input.Trim();

            return email.Length > 500
                ? Errors.General.InvalidLength()
                : Regex.IsMatch(email, @"^(.+)@(.+)$") == false ? Errors.General.ValueIsInvalid() : new Email(email);
        }

        protected override IEnumerable<object> GetEqualityComponents()
        {
            yield return Value;
        }
    }
}

file[9] = Domain\ActivityLog.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ActivityLog
    {
        public ActivityLog(bool active, string activityType, int eventId, bool isManualEntry, DateTimeOffset? startDate, DateTimeOffset? endDate, DateTimeOffset? dateAdded, bool light, bool siren, bool urgentDutyDriving, string remark, int shiftId, int userId)
        {
            if(string.IsNullOrWhiteSpace(activityType))
                throw new ArgumentException("Must include a value for Activity Type");
            if(string.IsNullOrWhiteSpace(remark))
                throw new ArgumentException("Must include a value for Remark");
            Active = active;
            ActivityType = activityType;
            EventId = eventId;
            IsManualEntry = isManualEntry;
            StartDate = startDate;
            EndDate = endDate;
            DateAdded = dateAdded;
            Light = light;
            Siren = siren;
            UrgentDutyDriving = urgentDutyDriving;
            Remark = remark;
            ShiftId = shiftId;
            UserId = userId;
        }

        public partial void Officer()
        {
            // todo: Add Officer behaviour here
        }

        public partial void Add(DateTimeOffset dateAdded, DateTimeOffset startTime, string activityType)
        {
            // todo: Add Add behaviour here
        }

        public partial void Update(DateTimeOffset endTime, string remark, bool? light, bool? siren, bool? urgentDutyDriving)
        {
            // todo: Add Update behaviour here
        }

        public partial void Delete(int id)
        {
            // todo: Add Delete behaviour here
        }

    }
}

file[10] = Domain\ActivityLog.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ActivityLog : Aggregate<int>
    {
        public bool Active { get; private set; }

        public string ActivityType { get; private set; }

        public int EventId { get; private set; }

        public bool IsManualEntry { get; private set; }

        public DateTimeOffset? StartDate { get; private set; }

        public DateTimeOffset? EndDate { get; private set; }

        public DateTimeOffset? DateAdded { get; private set; }

        public bool Light { get; private set; }

        public bool Siren { get; private set; }

        public bool UrgentDutyDriving { get; private set; }

        public string Remark { get; private set; }

        public int ShiftId { get; private set; }

        public int UserId { get; private set; }

        public partial void Officer();

        public partial void Add(DateTimeOffset dateAdded, DateTimeOffset startTime, string activityType);

        public partial void Update(DateTimeOffset endTime, string remark, bool? light, bool? siren, bool? urgentDutyDriving);

        public partial void Delete(int id);
    }
}

file[11] = Domain\AddressBook.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class AddressBook
    {
        public AddressBook(string? floorNumber, string? unitType, string? unitNumber, string streetName, string streetType, string streetSuffix, string? streetNumberFirst, string? streetNumberFirstPrefix, string? streetNumberFirstSuffix, string? streetNumberLast, string? streetNumberLastPrefix, string? streetNumberLastSuffix, string? streetDirectional, string? postalContainer, string postalCode, string suburb, string country, string fullAddress)
        {
            if(string.IsNullOrWhiteSpace(streetName))
                throw new ArgumentException("Must include a value for Street Name");
            if(string.IsNullOrWhiteSpace(streetType))
                throw new ArgumentException("Must include a value for Street Type");
            if(string.IsNullOrWhiteSpace(streetSuffix))
                throw new ArgumentException("Must include a value for Street Suffix");
            if(string.IsNullOrWhiteSpace(postalCode))
                throw new ArgumentException("Must include a value for Postal Code");
            if(string.IsNullOrWhiteSpace(suburb))
                throw new ArgumentException("Must include a value for Suburb");
            if(string.IsNullOrWhiteSpace(country))
                throw new ArgumentException("Must include a value for Country");
            if(string.IsNullOrWhiteSpace(fullAddress))
                throw new ArgumentException("Must include a value for Full Address");
            FloorNumber = floorNumber;
            UnitType = unitType;
            UnitNumber = unitNumber;
            StreetName = streetName;
            StreetType = streetType;
            StreetSuffix = streetSuffix;
            StreetNumberFirst = streetNumberFirst;
            StreetNumberFirstPrefix = streetNumberFirstPrefix;
            StreetNumberFirstSuffix = streetNumberFirstSuffix;
            StreetNumberLast = streetNumberLast;
            StreetNumberLastPrefix = streetNumberLastPrefix;
            StreetNumberLastSuffix = streetNumberLastSuffix;
            StreetDirectional = streetDirectional;
            PostalContainer = postalContainer;
            PostalCode = postalCode;
            Suburb = suburb;
            Country = country;
            FullAddress = fullAddress;
        }

    }
}

file[12] = Domain\AddressBook.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class AddressBook
    {
        public int Id { get; private set; }

        public string? FloorNumber { get; private set; }

        public string? UnitType { get; private set; }

        public string? UnitNumber { get; private set; }

        public string StreetName { get; private set; }

        public string StreetType { get; private set; }

        public string StreetSuffix { get; private set; }

        public string? StreetNumberFirst { get; private set; }

        public string? StreetNumberFirstPrefix { get; private set; }

        public string? StreetNumberFirstSuffix { get; private set; }

        public string? StreetNumberLast { get; private set; }

        public string? StreetNumberLastPrefix { get; private set; }

        public string? StreetNumberLastSuffix { get; private set; }

        public string? StreetDirectional { get; private set; }

        public string? PostalContainer { get; private set; }

        public string PostalCode { get; private set; }

        public string Suburb { get; private set; }

        public string Country { get; private set; }

        public string FullAddress { get; private set; }
    }
}

file[13] = Domain\Alert.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class Alert
    {
        public Alert(bool active, DateTimeOffset? effectFrom, DateTimeOffset? effectTo, int level, string title, string remark, string reasonForDeletion, bool silent, int silentNotifyContactId, int personId, int vehicleId, int organisationId, int userId, int systemId, bool isManualEntry)
        {
            if(string.IsNullOrWhiteSpace(title))
                throw new ArgumentException("Must include a value for Title");
            if(string.IsNullOrWhiteSpace(remark))
                throw new ArgumentException("Must include a value for Remark");
            if(string.IsNullOrWhiteSpace(reasonForDeletion))
                throw new ArgumentException("Must include a value for Reason for Deletion");
            Active = active;
            EffectFrom = effectFrom;
            EffectTo = effectTo;
            Level = level;
            Title = title;
            Remark = remark;
            ReasonForDeletion = reasonForDeletion;
            Silent = silent;
            SilentNotifyContactId = silentNotifyContactId;
            PersonId = personId;
            VehicleId = vehicleId;
            OrganisationId = organisationId;
            UserId = userId;
            SystemId = systemId;
            IsManualEntry = isManualEntry;
        }

        public partial void Save(int id, int alertLevel, DateTimeOffset effectiveDate, DateTimeOffset expiryDate, string remark, bool silent, int silentNotifyContactId, int personId, int vehicleId, int organisationId)
        {
            // todo: Add Save behaviour here
        }

        public partial void Delete(int id, string reason)
        {
            // todo: Add Delete behaviour here
        }

    }
}

file[14] = Domain\Alert.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class Alert : Aggregate<int>
    {
        public bool Active { get; private set; }

        public DateTimeOffset? EffectFrom { get; private set; }

        public DateTimeOffset? EffectTo { get; private set; }

        public int Level { get; private set; }

        public string Title { get; private set; }

        public string Remark { get; private set; }

        public string ReasonForDeletion { get; private set; }

        public bool Silent { get; private set; }

        public int SilentNotifyContactId { get; private set; }

        public int PersonId { get; private set; }

        public int VehicleId { get; private set; }

        public int OrganisationId { get; private set; }

        public int UserId { get; private set; }

        public int SystemId { get; private set; }

        public bool IsManualEntry { get; private set; }

        public partial void Save(int id, int alertLevel, DateTimeOffset effectiveDate, DateTimeOffset expiryDate, string remark, bool silent, int silentNotifyContactId, int personId, int vehicleId, int organisationId);

        public partial void Delete(int id, string reason);
    }
}

file[15] = Domain\AzureSqlMaintenanceLog.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class AzureSqlMaintenanceLog
    {
        public AzureSqlMaintenanceLog(long id, DateTimeOffset? operationTime, string command, string? extraInfo, DateTimeOffset? startTime, DateTimeOffset? endTime, string? statusMessage)
        {
            if(string.IsNullOrWhiteSpace(command))
                throw new ArgumentException("Must include a value for Command");
            Id = id;
            OperationTime = operationTime;
            Command = command;
            ExtraInfo = extraInfo;
            StartTime = startTime;
            EndTime = endTime;
            StatusMessage = statusMessage;
        }

    }
}

file[16] = Domain\AzureSqlMaintenanceLog.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class AzureSqlMaintenanceLog
    {
        public long Id { get; private set; }

        public DateTimeOffset? OperationTime { get; private set; }

        public string Command { get; private set; }

        public string? ExtraInfo { get; private set; }

        public DateTimeOffset? StartTime { get; private set; }

        public DateTimeOffset? EndTime { get; private set; }

        public string? StatusMessage { get; private set; }
    }
}

file[17] = Domain\BatchProcess.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class BatchProcess
    {
        public BatchProcess(string url, int statusId, DateTimeOffset? startedOn, DateTimeOffset? stoppedOn)
        {
            if(string.IsNullOrWhiteSpace(url))
                throw new ArgumentException("Must include a value for Url");
            Url = url;
            StatusId = statusId;
            StartedOn = startedOn;
            StoppedOn = stoppedOn;
        }

        public partial void SilentEmail()
        {
            // todo: Add Silent Email behaviour here
        }

        public partial void InterceptEmail()
        {
            // todo: Add Intercept Email behaviour here
        }

        public partial void InterceptFile()
        {
            // todo: Add Intercept File behaviour here
        }

        public partial void FinesVicRoad()
        {
            // todo: Add Fines Vic Road behaviour here
        }

        public partial void SqlMaintenance()
        {
            // todo: Add Sql Maintenance behaviour here
        }

        public partial void TasInfringmentEmail()
        {
            // todo: Add Tas Infringment Email behaviour here
        }

    }
}

file[18] = Domain\BatchProcess.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class BatchProcess : Aggregate<int>
    {
        public string Url { get; private set; }

        public int StatusId { get; private set; }

        public DateTimeOffset? StartedOn { get; private set; }

        public DateTimeOffset? StoppedOn { get; private set; }

        public partial void SilentEmail();

        public partial void InterceptEmail();

        public partial void InterceptFile();

        public partial void FinesVicRoad();

        public partial void SqlMaintenance();

        public partial void TasInfringmentEmail();
    }
}

file[19] = Domain\BatchProcessTask.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class BatchProcessTask
    {
        public BatchProcessTask(int typeId, int statusId, int entityId, int entityTypeId, int batchProcessId, string resultMessage, DateTimeOffset? startedOn, DateTimeOffset? stoppedOn)
        {
            if(string.IsNullOrWhiteSpace(resultMessage))
                throw new ArgumentException("Must include a value for Result Message");
            TypeId = typeId;
            StatusId = statusId;
            EntityId = entityId;
            EntityTypeId = entityTypeId;
            BatchProcessId = batchProcessId;
            ResultMessage = resultMessage;
            StartedOn = startedOn;
            StoppedOn = stoppedOn;
        }

    }
}

file[20] = Domain\BatchProcessTask.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class BatchProcessTask
    {
        public int Id { get; private set; }

        public int TypeId { get; private set; }

        public int StatusId { get; private set; }

        public int EntityId { get; private set; }

        public int EntityTypeId { get; private set; }

        public int BatchProcessId { get; private set; }

        public string ResultMessage { get; private set; }

        public DateTimeOffset? StartedOn { get; private set; }

        public DateTimeOffset? StoppedOn { get; private set; }
    }
}

file[21] = Domain\BatchProcessTaskItem.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class BatchProcessTaskItem
    {
        public BatchProcessTaskItem(int taskId, int statusId, int entityId, int entityTypeId, string reference, string resultMessage)
        {
            if(string.IsNullOrWhiteSpace(reference))
                throw new ArgumentException("Must include a value for Reference");
            if(string.IsNullOrWhiteSpace(resultMessage))
                throw new ArgumentException("Must include a value for Result Message");
            TaskId = taskId;
            StatusId = statusId;
            EntityId = entityId;
            EntityTypeId = entityTypeId;
            Reference = reference;
            ResultMessage = resultMessage;
        }

    }
}

file[22] = Domain\BatchProcessTaskItem.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class BatchProcessTaskItem
    {
        public int Id { get; private set; }

        public int TaskId { get; private set; }

        public int StatusId { get; private set; }

        public int EntityId { get; private set; }

        public int EntityTypeId { get; private set; }

        public string Reference { get; private set; }

        public string ResultMessage { get; private set; }
    }
}

file[23] = Domain\ComplianceAction.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceAction
    {
        public ComplianceAction(int typeId, string? noticeNumber, int eventId, int? mediaId, int? vehicleId, int? personId, int? organisationId, DateTimeOffset dateIssued, DateTimeOffset? noticeIssuedDate, int? stateId, string? juroEntry, bool active, int systemId)
        {
            TypeId = typeId;
            NoticeNumber = noticeNumber;
            EventId = eventId;
            MediaId = mediaId;
            VehicleId = vehicleId;
            PersonId = personId;
            OrganisationId = organisationId;
            DateIssued = dateIssued;
            NoticeIssuedDate = noticeIssuedDate;
            StateId = stateId;
            JuroEntry = juroEntry;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[24] = Domain\ComplianceAction.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceAction
    {
        public int Id { get; private set; }

        public int TypeId { get; private set; }

        public string? NoticeNumber { get; private set; }

        public int EventId { get; private set; }

        public int? MediaId { get; private set; }

        public int? VehicleId { get; private set; }

        public int? PersonId { get; private set; }

        public int? OrganisationId { get; private set; }

        public DateTimeOffset DateIssued { get; private set; }

        public DateTimeOffset? NoticeIssuedDate { get; private set; }

        public int? StateId { get; private set; }

        public string? JuroEntry { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[25] = Domain\ComplianceActionImport.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceActionImport
    {
        public ComplianceActionImport(int vehicleRegistrationStateId, string vehicleRegistrationNumber, string personGivenName, string personFamilyName, DateTimeOffset? personDateOfBirth, string personLicenceNumber, int personLicenceStateId, string organisationAcn, string organisationIncorporatedNumber, int typeId, DateTimeOffset dateIssued, DateTimeOffset? dateCleared, string noticeNumber, string line1, string line2, string line3, string line4, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(vehicleRegistrationNumber))
                throw new ArgumentException("Must include a value for Vehicle Registration Number");
            if(string.IsNullOrWhiteSpace(personGivenName))
                throw new ArgumentException("Must include a value for Person Given Name");
            if(string.IsNullOrWhiteSpace(personFamilyName))
                throw new ArgumentException("Must include a value for Person Family Name");
            if(string.IsNullOrWhiteSpace(personLicenceNumber))
                throw new ArgumentException("Must include a value for Person Licence Number");
            if(string.IsNullOrWhiteSpace(organisationAcn))
                throw new ArgumentException("Must include a value for Organisation Acn");
            if(string.IsNullOrWhiteSpace(organisationIncorporatedNumber))
                throw new ArgumentException("Must include a value for Organisation Incorporated Number");
            if(string.IsNullOrWhiteSpace(noticeNumber))
                throw new ArgumentException("Must include a value for Notice Number");
            if(string.IsNullOrWhiteSpace(line1))
                throw new ArgumentException("Must include a value for Line 1");
            if(string.IsNullOrWhiteSpace(line2))
                throw new ArgumentException("Must include a value for Line 2");
            if(string.IsNullOrWhiteSpace(line3))
                throw new ArgumentException("Must include a value for Line 3");
            if(string.IsNullOrWhiteSpace(line4))
                throw new ArgumentException("Must include a value for Line 4");
            VehicleRegistrationStateId = vehicleRegistrationStateId;
            VehicleRegistrationNumber = vehicleRegistrationNumber;
            PersonGivenName = personGivenName;
            PersonFamilyName = personFamilyName;
            PersonDateOfBirth = personDateOfBirth;
            PersonLicenceNumber = personLicenceNumber;
            PersonLicenceStateId = personLicenceStateId;
            OrganisationAcn = organisationAcn;
            OrganisationIncorporatedNumber = organisationIncorporatedNumber;
            TypeId = typeId;
            DateIssued = dateIssued;
            DateCleared = dateCleared;
            NoticeNumber = noticeNumber;
            Line1 = line1;
            Line2 = line2;
            Line3 = line3;
            Line4 = line4;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[26] = Domain\ComplianceActionImport.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceActionImport
    {
        public int Id { get; private set; }

        public int VehicleRegistrationStateId { get; private set; }

        public string VehicleRegistrationNumber { get; private set; }

        public string PersonGivenName { get; private set; }

        public string PersonFamilyName { get; private set; }

        public DateTimeOffset? PersonDateOfBirth { get; private set; }

        public string PersonLicenceNumber { get; private set; }

        public int PersonLicenceStateId { get; private set; }

        public string OrganisationAcn { get; private set; }

        public string OrganisationIncorporatedNumber { get; private set; }

        public int TypeId { get; private set; }

        public DateTimeOffset DateIssued { get; private set; }

        public DateTimeOffset? DateCleared { get; private set; }

        public string NoticeNumber { get; private set; }

        public string Line1 { get; private set; }

        public string Line2 { get; private set; }

        public string Line3 { get; private set; }

        public string Line4 { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[27] = Domain\ComplianceActionLocation.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceActionLocation
    {
        public ComplianceActionLocation(int complianceActionId, int stateId, string localGovernmentArea, string lgashortTitle, string near, string commonName, string remark, bool active, MapDetail mapDetail, AddressBook address, DateTimeOffset? dateAdded)
        {
            if(string.IsNullOrWhiteSpace(localGovernmentArea))
                throw new ArgumentException("Must include a value for Local Government Area");
            if(string.IsNullOrWhiteSpace(lgashortTitle))
                throw new ArgumentException("Must include a value for Lgashort Title");
            if(string.IsNullOrWhiteSpace(near))
                throw new ArgumentException("Must include a value for Near");
            if(string.IsNullOrWhiteSpace(commonName))
                throw new ArgumentException("Must include a value for Common Name");
            if(string.IsNullOrWhiteSpace(remark))
                throw new ArgumentException("Must include a value for Remark");
            ComplianceActionId = complianceActionId;
            StateId = stateId;
            LocalGovernmentArea = localGovernmentArea;
            LgashortTitle = lgashortTitle;
            Near = near;
            CommonName = commonName;
            Remark = remark;
            Active = active;
            MapDetail = mapDetail;
            Address = address;
            DateAdded = dateAdded;
        }

    }
}

file[28] = Domain\ComplianceActionLocation.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceActionLocation
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public int StateId { get; private set; }

        public string LocalGovernmentArea { get; private set; }

        public string LgashortTitle { get; private set; }

        public string Near { get; private set; }

        public string CommonName { get; private set; }

        public string Remark { get; private set; }

        public bool Active { get; private set; }

        public MapDetail MapDetail { get; private set; }

        public AddressBook Address { get; private set; }

        public DateTimeOffset? DateAdded { get; private set; }
    }
}

file[29] = Domain\ComplianceActionOffence.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceActionOffence
    {
        public ComplianceActionOffence(int complianceActionId, string category, DateTimeOffset? effectiveDate, DateTimeOffset? expiryDate, string shortTitle, string title, decimal sortOrder, int demeritPoint, int suspensionPeriod, decimal fine, string reportingCategory, string legislationReference, string penaltyDescription, string infringementCategory, string infringementIssueCategory, string longDescription, decimal levy, string code, string sourceManifestId, bool causePermitFlag, string causePermit, string inspectorDetail, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(category))
                throw new ArgumentException("Must include a value for Category");
            if(string.IsNullOrWhiteSpace(shortTitle))
                throw new ArgumentException("Must include a value for Short Title");
            if(string.IsNullOrWhiteSpace(title))
                throw new ArgumentException("Must include a value for Title");
            if(string.IsNullOrWhiteSpace(reportingCategory))
                throw new ArgumentException("Must include a value for Reporting Category");
            if(string.IsNullOrWhiteSpace(legislationReference))
                throw new ArgumentException("Must include a value for Legislation Reference");
            if(string.IsNullOrWhiteSpace(penaltyDescription))
                throw new ArgumentException("Must include a value for Penalty Description");
            if(string.IsNullOrWhiteSpace(infringementCategory))
                throw new ArgumentException("Must include a value for Infringement Category");
            if(string.IsNullOrWhiteSpace(infringementIssueCategory))
                throw new ArgumentException("Must include a value for Infringement Issue Category");
            if(string.IsNullOrWhiteSpace(longDescription))
                throw new ArgumentException("Must include a value for Long Description");
            if(string.IsNullOrWhiteSpace(code))
                throw new ArgumentException("Must include a value for Code");
            if(string.IsNullOrWhiteSpace(sourceManifestId))
                throw new ArgumentException("Must include a value for Source Manifest Id");
            if(string.IsNullOrWhiteSpace(causePermit))
                throw new ArgumentException("Must include a value for Cause Permit");
            if(string.IsNullOrWhiteSpace(inspectorDetail))
                throw new ArgumentException("Must include a value for Inspector Detail");
            ComplianceActionId = complianceActionId;
            Category = category;
            EffectiveDate = effectiveDate;
            ExpiryDate = expiryDate;
            ShortTitle = shortTitle;
            Title = title;
            SortOrder = sortOrder;
            DemeritPoint = demeritPoint;
            SuspensionPeriod = suspensionPeriod;
            Fine = fine;
            ReportingCategory = reportingCategory;
            LegislationReference = legislationReference;
            PenaltyDescription = penaltyDescription;
            InfringementCategory = infringementCategory;
            InfringementIssueCategory = infringementIssueCategory;
            LongDescription = longDescription;
            Levy = levy;
            Code = code;
            SourceManifestId = sourceManifestId;
            CausePermitFlag = causePermitFlag;
            CausePermit = causePermit;
            InspectorDetail = inspectorDetail;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[30] = Domain\ComplianceActionOffence.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceActionOffence
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public string Category { get; private set; }

        public DateTimeOffset? EffectiveDate { get; private set; }

        public DateTimeOffset? ExpiryDate { get; private set; }

        public string ShortTitle { get; private set; }

        public string Title { get; private set; }

        public decimal SortOrder { get; private set; }

        public int DemeritPoint { get; private set; }

        public int SuspensionPeriod { get; private set; }

        public decimal Fine { get; private set; }

        public string ReportingCategory { get; private set; }

        public string LegislationReference { get; private set; }

        public string PenaltyDescription { get; private set; }

        public string InfringementCategory { get; private set; }

        public string InfringementIssueCategory { get; private set; }

        public string LongDescription { get; private set; }

        public decimal Levy { get; private set; }

        public string Code { get; private set; }

        public string SourceManifestId { get; private set; }

        public bool CausePermitFlag { get; private set; }

        public string CausePermit { get; private set; }

        public string InspectorDetail { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[31] = Domain\ComplianceActionService.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceActionService
    {
        public ComplianceActionService(int complianceActionId, int registeredAddressId, int alternateAddressId, string email, bool serviceEmail, bool hasServiceRegisteredAddress, bool hasServiceAlternateAddress, bool serviceInPerson, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(email))
                throw new ArgumentException("Must include a value for Email");
            ComplianceActionId = complianceActionId;
            RegisteredAddressId = registeredAddressId;
            AlternateAddressId = alternateAddressId;
            Email = email;
            ServiceEmail = serviceEmail;
            HasServiceRegisteredAddress = hasServiceRegisteredAddress;
            HasServiceAlternateAddress = hasServiceAlternateAddress;
            ServiceInPerson = serviceInPerson;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[32] = Domain\ComplianceActionService.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceActionService
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public int RegisteredAddressId { get; private set; }

        public int AlternateAddressId { get; private set; }

        public string Email { get; private set; }

        public bool ServiceEmail { get; private set; }

        public bool HasServiceRegisteredAddress { get; private set; }

        public bool HasServiceAlternateAddress { get; private set; }

        public bool ServiceInPerson { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[33] = Domain\ComplianceActionServiceAddress.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceActionServiceAddress
    {
        public ComplianceActionServiceAddress(int stateId, string localGovernmentArea, string lgashortTitle, string near, string commonName, string remark, bool active, MapDetail mapDetail, AddressBook address, DateTimeOffset? dateAdded)
        {
            if(string.IsNullOrWhiteSpace(localGovernmentArea))
                throw new ArgumentException("Must include a value for Local Government Area");
            if(string.IsNullOrWhiteSpace(lgashortTitle))
                throw new ArgumentException("Must include a value for Lgashort Title");
            if(string.IsNullOrWhiteSpace(near))
                throw new ArgumentException("Must include a value for Near");
            if(string.IsNullOrWhiteSpace(commonName))
                throw new ArgumentException("Must include a value for Common Name");
            if(string.IsNullOrWhiteSpace(remark))
                throw new ArgumentException("Must include a value for Remark");
            StateId = stateId;
            LocalGovernmentArea = localGovernmentArea;
            LgashortTitle = lgashortTitle;
            Near = near;
            CommonName = commonName;
            Remark = remark;
            Active = active;
            MapDetail = mapDetail;
            Address = address;
            DateAdded = dateAdded;
        }

    }
}

file[34] = Domain\ComplianceActionServiceAddress.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceActionServiceAddress
    {
        public int Id { get; private set; }

        public int StateId { get; private set; }

        public string LocalGovernmentArea { get; private set; }

        public string LgashortTitle { get; private set; }

        public string Near { get; private set; }

        public string CommonName { get; private set; }

        public string Remark { get; private set; }

        public bool Active { get; private set; }

        public MapDetail MapDetail { get; private set; }

        public AddressBook Address { get; private set; }

        public DateTimeOffset? DateAdded { get; private set; }
    }
}

file[35] = Domain\ComplianceActionStatus.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceActionStatus
    {
        public ComplianceActionStatus(int complianceActionId, int statusId, string reason, DateTimeOffset? recordedDate, string toProceedOffence, string givenName, string familyName, int userId, string homeLocation, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(reason))
                throw new ArgumentException("Must include a value for Reason");
            if(string.IsNullOrWhiteSpace(toProceedOffence))
                throw new ArgumentException("Must include a value for To Proceed Offence");
            if(string.IsNullOrWhiteSpace(givenName))
                throw new ArgumentException("Must include a value for Given Name");
            if(string.IsNullOrWhiteSpace(familyName))
                throw new ArgumentException("Must include a value for Family Name");
            if(string.IsNullOrWhiteSpace(homeLocation))
                throw new ArgumentException("Must include a value for Home Location");
            ComplianceActionId = complianceActionId;
            StatusId = statusId;
            Reason = reason;
            RecordedDate = recordedDate;
            ToProceedOffence = toProceedOffence;
            GivenName = givenName;
            FamilyName = familyName;
            UserId = userId;
            HomeLocation = homeLocation;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[36] = Domain\ComplianceActionStatus.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceActionStatus
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public int StatusId { get; private set; }

        public string Reason { get; private set; }

        public DateTimeOffset? RecordedDate { get; private set; }

        public string ToProceedOffence { get; private set; }

        public string GivenName { get; private set; }

        public string FamilyName { get; private set; }

        public int UserId { get; private set; }

        public string HomeLocation { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[37] = Domain\ComplianceActionSubComponent.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceActionSubComponent
    {
        public ComplianceActionSubComponent(int complianceActionId, string name, string nameCode, string action, string actionCode, string information, bool active)
        {
            if(string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Must include a value for Name");
            if(string.IsNullOrWhiteSpace(nameCode))
                throw new ArgumentException("Must include a value for Name Code");
            if(string.IsNullOrWhiteSpace(action))
                throw new ArgumentException("Must include a value for Action");
            if(string.IsNullOrWhiteSpace(actionCode))
                throw new ArgumentException("Must include a value for Action Code");
            if(string.IsNullOrWhiteSpace(information))
                throw new ArgumentException("Must include a value for Information");
            ComplianceActionId = complianceActionId;
            Name = name;
            NameCode = nameCode;
            Action = action;
            ActionCode = actionCode;
            Information = information;
            Active = active;
        }

    }
}

file[38] = Domain\ComplianceActionSubComponent.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceActionSubComponent
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public string Name { get; private set; }

        public string NameCode { get; private set; }

        public string Action { get; private set; }

        public string ActionCode { get; private set; }

        public string Information { get; private set; }

        public bool Active { get; private set; }
    }
}

file[39] = Domain\ComplianceDefect.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceDefect
    {
        public ComplianceDefect(int complianceActionId, decimal odometer, bool vehicleUnattended, bool numberPlateDefective, bool labelAttached, bool roadWorthyRequired, string conditionOfUse, string noticeToBeCleared, DateTimeOffset? vehicleNotUsed, int vehicleNotUsedDay, int vehicleNotUsedHour, string inspectionType, string natureOfInspection, bool inspectionTypeFull, bool inspectionTypePartial, bool inspectionTypeOther, bool inspectionTypeAudit, bool defectCategoryMinor, bool defectCategoryMajor, bool defectCategoryMajorGrounded, bool defectCategorySelfClearing, bool vicRoadsInspection, bool infringementIssued, string howIsTheVehicleDefective, string clearanceInspection, string clearedAt, string clearanceOther, string clearedReferenceId, string direction, string methodOfRemoval, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(conditionOfUse))
                throw new ArgumentException("Must include a value for Condition of Use");
            if(string.IsNullOrWhiteSpace(noticeToBeCleared))
                throw new ArgumentException("Must include a value for Notice to Be Cleared");
            if(string.IsNullOrWhiteSpace(inspectionType))
                throw new ArgumentException("Must include a value for Inspection Type");
            if(string.IsNullOrWhiteSpace(natureOfInspection))
                throw new ArgumentException("Must include a value for Nature of Inspection");
            if(string.IsNullOrWhiteSpace(howIsTheVehicleDefective))
                throw new ArgumentException("Must include a value for How Is the Vehicle Defective");
            if(string.IsNullOrWhiteSpace(clearanceInspection))
                throw new ArgumentException("Must include a value for Clearance Inspection");
            if(string.IsNullOrWhiteSpace(clearedAt))
                throw new ArgumentException("Must include a value for Cleared at");
            if(string.IsNullOrWhiteSpace(clearanceOther))
                throw new ArgumentException("Must include a value for Clearance Other");
            if(string.IsNullOrWhiteSpace(clearedReferenceId))
                throw new ArgumentException("Must include a value for Cleared Reference Id");
            if(string.IsNullOrWhiteSpace(direction))
                throw new ArgumentException("Must include a value for Direction");
            if(string.IsNullOrWhiteSpace(methodOfRemoval))
                throw new ArgumentException("Must include a value for Method of Removal");
            ComplianceActionId = complianceActionId;
            Odometer = odometer;
            VehicleUnattended = vehicleUnattended;
            NumberPlateDefective = numberPlateDefective;
            LabelAttached = labelAttached;
            RoadWorthyRequired = roadWorthyRequired;
            ConditionOfUse = conditionOfUse;
            NoticeToBeCleared = noticeToBeCleared;
            VehicleNotUsed = vehicleNotUsed;
            VehicleNotUsedDay = vehicleNotUsedDay;
            VehicleNotUsedHour = vehicleNotUsedHour;
            InspectionType = inspectionType;
            NatureOfInspection = natureOfInspection;
            InspectionTypeFull = inspectionTypeFull;
            InspectionTypePartial = inspectionTypePartial;
            InspectionTypeOther = inspectionTypeOther;
            InspectionTypeAudit = inspectionTypeAudit;
            DefectCategoryMinor = defectCategoryMinor;
            DefectCategoryMajor = defectCategoryMajor;
            DefectCategoryMajorGrounded = defectCategoryMajorGrounded;
            DefectCategorySelfClearing = defectCategorySelfClearing;
            VicRoadsInspection = vicRoadsInspection;
            InfringementIssued = infringementIssued;
            HowIsTheVehicleDefective = howIsTheVehicleDefective;
            ClearanceInspection = clearanceInspection;
            ClearedAt = clearedAt;
            ClearanceOther = clearanceOther;
            ClearedReferenceId = clearedReferenceId;
            Direction = direction;
            MethodOfRemoval = methodOfRemoval;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[40] = Domain\ComplianceDefect.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceDefect
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public decimal Odometer { get; private set; }

        public bool VehicleUnattended { get; private set; }

        public bool NumberPlateDefective { get; private set; }

        public bool LabelAttached { get; private set; }

        public bool RoadWorthyRequired { get; private set; }

        public string ConditionOfUse { get; private set; }

        public string NoticeToBeCleared { get; private set; }

        public DateTimeOffset? VehicleNotUsed { get; private set; }

        public int VehicleNotUsedDay { get; private set; }

        public int VehicleNotUsedHour { get; private set; }

        public string InspectionType { get; private set; }

        public string NatureOfInspection { get; private set; }

        public bool InspectionTypeFull { get; private set; }

        public bool InspectionTypePartial { get; private set; }

        public bool InspectionTypeOther { get; private set; }

        public bool InspectionTypeAudit { get; private set; }

        public bool DefectCategoryMinor { get; private set; }

        public bool DefectCategoryMajor { get; private set; }

        public bool DefectCategoryMajorGrounded { get; private set; }

        public bool DefectCategorySelfClearing { get; private set; }

        public bool VicRoadsInspection { get; private set; }

        public bool InfringementIssued { get; private set; }

        public string HowIsTheVehicleDefective { get; private set; }

        public string ClearanceInspection { get; private set; }

        public string ClearedAt { get; private set; }

        public string ClearanceOther { get; private set; }

        public string ClearedReferenceId { get; private set; }

        public string Direction { get; private set; }

        public string MethodOfRemoval { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[41] = Domain\ComplianceDefectSubComponent.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceDefectSubComponent
    {
        public ComplianceDefectSubComponent(int complianceDefectId, string name, string nameCode, string action, string actionCode, string information, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Must include a value for Name");
            if(string.IsNullOrWhiteSpace(nameCode))
                throw new ArgumentException("Must include a value for Name Code");
            if(string.IsNullOrWhiteSpace(action))
                throw new ArgumentException("Must include a value for Action");
            if(string.IsNullOrWhiteSpace(actionCode))
                throw new ArgumentException("Must include a value for Action Code");
            if(string.IsNullOrWhiteSpace(information))
                throw new ArgumentException("Must include a value for Information");
            ComplianceDefectId = complianceDefectId;
            Name = name;
            NameCode = nameCode;
            Action = action;
            ActionCode = actionCode;
            Information = information;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[42] = Domain\ComplianceDefectSubComponent.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceDefectSubComponent
    {
        public int Id { get; private set; }

        public int ComplianceDefectId { get; private set; }

        public string Name { get; private set; }

        public string NameCode { get; private set; }

        public string Action { get; private set; }

        public string ActionCode { get; private set; }

        public string Information { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[43] = Domain\ComplianceDirectionDimension.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceDirectionDimension
    {
        public ComplianceDirectionDimension(int complianceActionId, int personDriverId, int personOperatorId, int organisationOperatorId, bool massLimit, bool dimensionLimit, bool @unsafe, bool notSecured, string severity, bool secureLoad, bool reduceGvm, decimal reduceGvmnumber, bool adjustAxleGroup, int adjustAxleGroupNumber, int adjustAxleGroupBy, bool adjustVehicleDimension, decimal adjustVehicleDimensionLength, decimal adjustVehicleDimensionWidth, decimal adjustVehicleDimensionHeight, decimal adjustVehicleDimensionOverhang, string nominatedPlace, string condition, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(severity))
                throw new ArgumentException("Must include a value for Severity");
            if(string.IsNullOrWhiteSpace(nominatedPlace))
                throw new ArgumentException("Must include a value for Nominated Place");
            if(string.IsNullOrWhiteSpace(condition))
                throw new ArgumentException("Must include a value for Condition");
            ComplianceActionId = complianceActionId;
            PersonDriverId = personDriverId;
            PersonOperatorId = personOperatorId;
            OrganisationOperatorId = organisationOperatorId;
            MassLimit = massLimit;
            DimensionLimit = dimensionLimit;
            Unsafe = @unsafe;
            NotSecured = notSecured;
            Severity = severity;
            SecureLoad = secureLoad;
            ReduceGvm = reduceGvm;
            ReduceGvmnumber = reduceGvmnumber;
            AdjustAxleGroup = adjustAxleGroup;
            AdjustAxleGroupNumber = adjustAxleGroupNumber;
            AdjustAxleGroupBy = adjustAxleGroupBy;
            AdjustVehicleDimension = adjustVehicleDimension;
            AdjustVehicleDimensionLength = adjustVehicleDimensionLength;
            AdjustVehicleDimensionWidth = adjustVehicleDimensionWidth;
            AdjustVehicleDimensionHeight = adjustVehicleDimensionHeight;
            AdjustVehicleDimensionOverhang = adjustVehicleDimensionOverhang;
            NominatedPlace = nominatedPlace;
            Condition = condition;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[44] = Domain\ComplianceDirectionDimension.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceDirectionDimension
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public int PersonDriverId { get; private set; }

        public int PersonOperatorId { get; private set; }

        public int OrganisationOperatorId { get; private set; }

        public bool MassLimit { get; private set; }

        public bool DimensionLimit { get; private set; }

        public bool Unsafe { get; private set; }

        public bool NotSecured { get; private set; }

        public string Severity { get; private set; }

        public bool SecureLoad { get; private set; }

        public bool ReduceGvm { get; private set; }

        public decimal ReduceGvmnumber { get; private set; }

        public bool AdjustAxleGroup { get; private set; }

        public int AdjustAxleGroupNumber { get; private set; }

        public int AdjustAxleGroupBy { get; private set; }

        public bool AdjustVehicleDimension { get; private set; }

        public decimal AdjustVehicleDimensionLength { get; private set; }

        public decimal AdjustVehicleDimensionWidth { get; private set; }

        public decimal AdjustVehicleDimensionHeight { get; private set; }

        public decimal AdjustVehicleDimensionOverhang { get; private set; }

        public string NominatedPlace { get; private set; }

        public string Condition { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[45] = Domain\ComplianceDirectionDimensionsHardcopy.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceDirectionDimensionsHardcopy
    {
        public ComplianceDirectionDimensionsHardcopy(int complianceActionId, int personDriverId, int personOperatorId, int organisationOperatorId, bool active, int systemId)
        {
            ComplianceActionId = complianceActionId;
            PersonDriverId = personDriverId;
            PersonOperatorId = personOperatorId;
            OrganisationOperatorId = organisationOperatorId;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[46] = Domain\ComplianceDirectionDimensionsHardcopy.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceDirectionDimensionsHardcopy
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public int PersonDriverId { get; private set; }

        public int PersonOperatorId { get; private set; }

        public int OrganisationOperatorId { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[47] = Domain\ComplianceDirectionFatigue.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceDirectionFatigue
    {
        public ComplianceDirectionFatigue(int complianceActionId, string workDiaryPageNumber, bool reasonableBeliefFatigue, bool reasonableBeliefMaximumWorkTime, bool reasonableBeliefMinimumRestTime, bool reasonableBeliefNoWorkDiary, bool suitableRestPlace, string suitableRestPlaceSuburb, string suitableRestPlaceOther, bool workReduced, int workReducedHour, int workReducedMinute, bool continuousRest, DateTimeOffset? continuousRestFrom, DateTimeOffset? continuousRestTo, bool restOrBreak, int restOrBreakHour, int restOrBreakMinute, DateTimeOffset? restOrBreakCommencing, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(workDiaryPageNumber))
                throw new ArgumentException("Must include a value for Work Diary Page Number");
            if(string.IsNullOrWhiteSpace(suitableRestPlaceSuburb))
                throw new ArgumentException("Must include a value for Suitable Rest Place Suburb");
            if(string.IsNullOrWhiteSpace(suitableRestPlaceOther))
                throw new ArgumentException("Must include a value for Suitable Rest Place Other");
            ComplianceActionId = complianceActionId;
            WorkDiaryPageNumber = workDiaryPageNumber;
            ReasonableBeliefFatigue = reasonableBeliefFatigue;
            ReasonableBeliefMaximumWorkTime = reasonableBeliefMaximumWorkTime;
            ReasonableBeliefMinimumRestTime = reasonableBeliefMinimumRestTime;
            ReasonableBeliefNoWorkDiary = reasonableBeliefNoWorkDiary;
            SuitableRestPlace = suitableRestPlace;
            SuitableRestPlaceSuburb = suitableRestPlaceSuburb;
            SuitableRestPlaceOther = suitableRestPlaceOther;
            WorkReduced = workReduced;
            WorkReducedHour = workReducedHour;
            WorkReducedMinute = workReducedMinute;
            ContinuousRest = continuousRest;
            ContinuousRestFrom = continuousRestFrom;
            ContinuousRestTo = continuousRestTo;
            RestOrBreak = restOrBreak;
            RestOrBreakHour = restOrBreakHour;
            RestOrBreakMinute = restOrBreakMinute;
            RestOrBreakCommencing = restOrBreakCommencing;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[48] = Domain\ComplianceDirectionFatigue.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceDirectionFatigue
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public string WorkDiaryPageNumber { get; private set; }

        public bool ReasonableBeliefFatigue { get; private set; }

        public bool ReasonableBeliefMaximumWorkTime { get; private set; }

        public bool ReasonableBeliefMinimumRestTime { get; private set; }

        public bool ReasonableBeliefNoWorkDiary { get; private set; }

        public bool SuitableRestPlace { get; private set; }

        public string SuitableRestPlaceSuburb { get; private set; }

        public string SuitableRestPlaceOther { get; private set; }

        public bool WorkReduced { get; private set; }

        public int WorkReducedHour { get; private set; }

        public int WorkReducedMinute { get; private set; }

        public bool ContinuousRest { get; private set; }

        public DateTimeOffset? ContinuousRestFrom { get; private set; }

        public DateTimeOffset? ContinuousRestTo { get; private set; }

        public bool RestOrBreak { get; private set; }

        public int RestOrBreakHour { get; private set; }

        public int RestOrBreakMinute { get; private set; }

        public DateTimeOffset? RestOrBreakCommencing { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[49] = Domain\ComplianceDirectionToRectify.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceDirectionToRectify
    {
        public ComplianceDirectionToRectify(int complianceActionId, string descriptionOfBreach, string directedTo, string directedToLocation, string movementCondition, bool active)
        {
            if(string.IsNullOrWhiteSpace(descriptionOfBreach))
                throw new ArgumentException("Must include a value for Description of Breach");
            if(string.IsNullOrWhiteSpace(directedTo))
                throw new ArgumentException("Must include a value for Directed to");
            if(string.IsNullOrWhiteSpace(directedToLocation))
                throw new ArgumentException("Must include a value for Directed to Location");
            if(string.IsNullOrWhiteSpace(movementCondition))
                throw new ArgumentException("Must include a value for Movement Condition");
            ComplianceActionId = complianceActionId;
            DescriptionOfBreach = descriptionOfBreach;
            DirectedTo = directedTo;
            DirectedToLocation = directedToLocation;
            MovementCondition = movementCondition;
            Active = active;
        }

    }
}

file[50] = Domain\ComplianceDirectionToRectify.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceDirectionToRectify
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public string DescriptionOfBreach { get; private set; }

        public string DirectedTo { get; private set; }

        public string DirectedToLocation { get; private set; }

        public string MovementCondition { get; private set; }

        public bool Active { get; private set; }
    }
}

file[51] = Domain\ComplianceEducation.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceEducation
    {
        public ComplianceEducation(int complianceActionId, string category, bool onRoad, string topicOfInterest, int timeTakenHour, int timeTakenMinute, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(category))
                throw new ArgumentException("Must include a value for Category");
            if(string.IsNullOrWhiteSpace(topicOfInterest))
                throw new ArgumentException("Must include a value for Topic of Interest");
            ComplianceActionId = complianceActionId;
            Category = category;
            OnRoad = onRoad;
            TopicOfInterest = topicOfInterest;
            TimeTakenHour = timeTakenHour;
            TimeTakenMinute = timeTakenMinute;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[52] = Domain\ComplianceEducation.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceEducation
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public string Category { get; private set; }

        public bool OnRoad { get; private set; }

        public string TopicOfInterest { get; private set; }

        public int TimeTakenHour { get; private set; }

        public int TimeTakenMinute { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[53] = Domain\ComplianceFormalCaution.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceFormalCaution
    {
        public ComplianceFormalCaution(int complianceActionId, decimal detectedSpeed, decimal allegedSpeed, decimal permittedSpeed, string information, string actionInvolvement, string employer, string occupation, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(information))
                throw new ArgumentException("Must include a value for Information");
            if(string.IsNullOrWhiteSpace(actionInvolvement))
                throw new ArgumentException("Must include a value for Action Involvement");
            if(string.IsNullOrWhiteSpace(employer))
                throw new ArgumentException("Must include a value for Employer");
            if(string.IsNullOrWhiteSpace(occupation))
                throw new ArgumentException("Must include a value for Occupation");
            ComplianceActionId = complianceActionId;
            DetectedSpeed = detectedSpeed;
            AllegedSpeed = allegedSpeed;
            PermittedSpeed = permittedSpeed;
            Information = information;
            ActionInvolvement = actionInvolvement;
            Employer = employer;
            Occupation = occupation;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[54] = Domain\ComplianceFormalCaution.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceFormalCaution
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public decimal DetectedSpeed { get; private set; }

        public decimal AllegedSpeed { get; private set; }

        public decimal PermittedSpeed { get; private set; }

        public string Information { get; private set; }

        public string ActionInvolvement { get; private set; }

        public string Employer { get; private set; }

        public string Occupation { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[55] = Domain\ComplianceFormalWarning.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceFormalWarning
    {
        public ComplianceFormalWarning(int complianceActionId, bool useTheVehicle, bool permittedTheUse, bool other, string description, string actionInvolvement, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Must include a value for Description");
            if(string.IsNullOrWhiteSpace(actionInvolvement))
                throw new ArgumentException("Must include a value for Action Involvement");
            ComplianceActionId = complianceActionId;
            UseTheVehicle = useTheVehicle;
            PermittedTheUse = permittedTheUse;
            Other = other;
            Description = description;
            ActionInvolvement = actionInvolvement;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[56] = Domain\ComplianceFormalWarning.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceFormalWarning
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public bool UseTheVehicle { get; private set; }

        public bool PermittedTheUse { get; private set; }

        public bool Other { get; private set; }

        public string Description { get; private set; }

        public string ActionInvolvement { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[57] = Domain\ComplianceInfringement.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceInfringement
    {
        public ComplianceInfringement(int complianceActionId, decimal detectedSpeed, decimal allegedSpeed, decimal permittedSpeed, string information, string actionInvolvement, string employer, string occupation, bool associateWeighingNotice, int vehicleOccupant, bool pplate, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(information))
                throw new ArgumentException("Must include a value for Information");
            if(string.IsNullOrWhiteSpace(actionInvolvement))
                throw new ArgumentException("Must include a value for Action Involvement");
            if(string.IsNullOrWhiteSpace(employer))
                throw new ArgumentException("Must include a value for Employer");
            if(string.IsNullOrWhiteSpace(occupation))
                throw new ArgumentException("Must include a value for Occupation");
            ComplianceActionId = complianceActionId;
            DetectedSpeed = detectedSpeed;
            AllegedSpeed = allegedSpeed;
            PermittedSpeed = permittedSpeed;
            Information = information;
            ActionInvolvement = actionInvolvement;
            Employer = employer;
            Occupation = occupation;
            AssociateWeighingNotice = associateWeighingNotice;
            VehicleOccupant = vehicleOccupant;
            Pplate = pplate;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[58] = Domain\ComplianceInfringement.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceInfringement
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public decimal DetectedSpeed { get; private set; }

        public decimal AllegedSpeed { get; private set; }

        public decimal PermittedSpeed { get; private set; }

        public string Information { get; private set; }

        public string ActionInvolvement { get; private set; }

        public string Employer { get; private set; }

        public string Occupation { get; private set; }

        public bool AssociateWeighingNotice { get; private set; }

        public int VehicleOccupant { get; private set; }

        public bool Pplate { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[59] = Domain\ComplianceOfficialWarning.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceOfficialWarning
    {
        public ComplianceOfficialWarning(int complianceActionId, bool useTheVehicle, bool permittedTheUse, bool other, string description, string actionInvolvement, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Must include a value for Description");
            if(string.IsNullOrWhiteSpace(actionInvolvement))
                throw new ArgumentException("Must include a value for Action Involvement");
            ComplianceActionId = complianceActionId;
            UseTheVehicle = useTheVehicle;
            PermittedTheUse = permittedTheUse;
            Other = other;
            Description = description;
            ActionInvolvement = actionInvolvement;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[60] = Domain\ComplianceOfficialWarning.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceOfficialWarning
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public bool UseTheVehicle { get; private set; }

        public bool PermittedTheUse { get; private set; }

        public bool Other { get; private set; }

        public string Description { get; private set; }

        public string ActionInvolvement { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[61] = Domain\ComplianceReportForProsecution.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceReportForProsecution
    {
        public ComplianceReportForProsecution(int complianceActionId, string referenceNumber, bool active)
        {
            if(string.IsNullOrWhiteSpace(referenceNumber))
                throw new ArgumentException("Must include a value for Reference Number");
            ComplianceActionId = complianceActionId;
            ReferenceNumber = referenceNumber;
            Active = active;
        }

    }
}

file[62] = Domain\ComplianceReportForProsecution.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceReportForProsecution
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public string ReferenceNumber { get; private set; }

        public bool Active { get; private set; }
    }
}

file[63] = Domain\ComplianceWAFormalCaution.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ComplianceWAFormalCaution
    {
        public ComplianceWAFormalCaution(int complianceActionId, bool useTheVehicle, bool permittedTheUse, bool other, string description, bool active)
        {
            if(string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Must include a value for Description");
            ComplianceActionId = complianceActionId;
            UseTheVehicle = useTheVehicle;
            PermittedTheUse = permittedTheUse;
            Other = other;
            Description = description;
            Active = active;
        }

    }
}

file[64] = Domain\ComplianceWAFormalCaution.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ComplianceWAFormalCaution
    {
        public int Id { get; private set; }

        public int ComplianceActionId { get; private set; }

        public bool UseTheVehicle { get; private set; }

        public bool PermittedTheUse { get; private set; }

        public bool Other { get; private set; }

        public string Description { get; private set; }

        public bool Active { get; private set; }
    }
}

file[65] = Domain\Event.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class Event
    {
        public Event(Guid? creationId, Guid? statusId, Guid? organisationId, Guid? reviewedUserId, DateTimeOffset? reviewedDateTime, DateTimeOffset? createDate, DateTimeOffset? completedDate, DateTimeOffset? reportedOnDate, DateTimeOffset? tookPlaceStartDate, DateTimeOffset? tookPlaceEndDate, DateTimeOffset? vehicleReleaseDate, bool? vehicleGrounded, string? operationName, string? methodOfIntercept, string? directionOfTravel, bool? light, bool? siren, bool? urgentDutyDriving, bool? complianceActionOffenceReport, bool? complianceActionOffenceReportReference, bool active, SourceSystemTypes systemId)
        {
            CreationId = creationId;
            StatusId = statusId;
            OrganisationId = organisationId;
            ReviewedUserId = reviewedUserId;
            ReviewedDateTime = reviewedDateTime;
            CreateDate = createDate;
            CompletedDate = completedDate;
            ReportedOnDate = reportedOnDate;
            TookPlaceStartDate = tookPlaceStartDate;
            TookPlaceEndDate = tookPlaceEndDate;
            VehicleReleaseDate = vehicleReleaseDate;
            VehicleGrounded = vehicleGrounded;
            OperationName = operationName;
            MethodOfIntercept = methodOfIntercept;
            DirectionOfTravel = directionOfTravel;
            Light = light;
            Siren = siren;
            UrgentDutyDriving = urgentDutyDriving;
            ComplianceActionOffenceReport = complianceActionOffenceReport;
            ComplianceActionOffenceReportReference = complianceActionOffenceReportReference;
            Active = active;
            SystemId = systemId;
        }

        public partial void Search(DateTimeOffset toDate, DateTimeOffset fromDate, string homeLocation, string team, bool myOrganisation, string interceptNumber, string noticeNumber, string registration, string vIN, string chassisNumber, int stateID, string noticeType, string licenceNumber, string firstName, string lastName, DateTimeOffset dOB, string organisationName, string aCN, string officerID, string officerLastName, bool hasAction)
        {
            // todo: Add Search behaviour here
        }

        public partial void Summary(int id)
        {
            // todo: Add Summary behaviour here
        }

        public partial void Save(int id, string status, Guid creationID, int organisationID, DateTimeOffset reviewedDateTime, DateTimeOffset reportedOnDate, DateTimeOffset tookPlaceStartDate, DateTimeOffset tookPlaceEndDate, DateTimeOffset createDate, DateTimeOffset completedDate, string methodOfIntercept, string directionOfTravel, string operationName, Note note, bool light, bool siren, bool urgentDutyDriving, DateTimeOffset vehicleReleaseDate, bool vehicleGrounded, List<Location> location, List<Officer> officer, List<Person> person, List<Vehicle> vehicle, List<Organisation> organisation, List<MediaReference> mediaReference, List<MediaDetail> medium, InterceptDetail intercept, WAInterceptDetail wAIntercept)
        {
            // todo: Add Save behaviour here
        }

        public partial void Index(int id)
        {
            // todo: Add Index behaviour here
        }

    }
}

file[66] = Domain\Event.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class Event : Aggregate<int>
    {
        public Guid? CreationId { get; private set; }

        public Guid? StatusId { get; private set; }

        public Guid? OrganisationId { get; private set; }

        public Guid? ReviewedUserId { get; private set; }

        public DateTimeOffset? ReviewedDateTime { get; private set; }

        public DateTimeOffset? CreateDate { get; private set; }

        public DateTimeOffset? CompletedDate { get; private set; }

        public DateTimeOffset? ReportedOnDate { get; private set; }

        public DateTimeOffset? TookPlaceStartDate { get; private set; }

        public DateTimeOffset? TookPlaceEndDate { get; private set; }

        public DateTimeOffset? VehicleReleaseDate { get; private set; }

        public bool? VehicleGrounded { get; private set; }

        public string? OperationName { get; private set; }

        public string? MethodOfIntercept { get; private set; }

        public string? DirectionOfTravel { get; private set; }

        public bool? Light { get; private set; }

        public bool? Siren { get; private set; }

        public bool? UrgentDutyDriving { get; private set; }

        public bool? ComplianceActionOffenceReport { get; private set; }

        public bool? ComplianceActionOffenceReportReference { get; private set; }

        public bool Active { get; private set; }

        public SourceSystemTypes SystemId { get; private set; }

        public partial void Search(DateTimeOffset toDate, DateTimeOffset fromDate, string homeLocation, string team, bool myOrganisation, string interceptNumber, string noticeNumber, string registration, string vIN, string chassisNumber, int stateID, string noticeType, string licenceNumber, string firstName, string lastName, DateTimeOffset dOB, string organisationName, string aCN, string officerID, string officerLastName, bool hasAction);

        public partial void Summary(int id);

        public partial void Save(int id, string status, Guid creationID, int organisationID, DateTimeOffset reviewedDateTime, DateTimeOffset reportedOnDate, DateTimeOffset tookPlaceStartDate, DateTimeOffset tookPlaceEndDate, DateTimeOffset createDate, DateTimeOffset completedDate, string methodOfIntercept, string directionOfTravel, string operationName, Note note, bool light, bool siren, bool urgentDutyDriving, DateTimeOffset vehicleReleaseDate, bool vehicleGrounded, List<Location> location, List<Officer> officer, List<Person> person, List<Vehicle> vehicle, List<Organisation> organisation, List<MediaReference> mediaReference, List<MediaDetail> medium, InterceptDetail intercept, WAInterceptDetail wAIntercept);

        public partial void Index(int id);
    }
}

file[67] = Domain\EventAddress.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventAddress
    {
        public EventAddress(Guid? stateId, AddressTypes eventAddressType, string? localGovernmentArea, string? lGAShortTitle, string? near, string? commonName, string? remark, bool active, MapDetail mapDetail, AddressBook address, DateTimeOffset dateAdded)
        {
            StateId = stateId;
            EventAddressType = eventAddressType;
            LocalGovernmentArea = localGovernmentArea;
            LGAShortTitle = lGAShortTitle;
            Near = near;
            CommonName = commonName;
            Remark = remark;
            Active = active;
            MapDetail = mapDetail;
            Address = address;
            DateAdded = dateAdded;
        }

    }
}

file[68] = Domain\EventAddress.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventAddress
    {
        public int Id { get; private set; }

        public Guid? StateId { get; private set; }

        public AddressTypes EventAddressType { get; private set; }

        public string? LocalGovernmentArea { get; private set; }

        public string? LGAShortTitle { get; private set; }

        public string? Near { get; private set; }

        public string? CommonName { get; private set; }

        public string? Remark { get; private set; }

        public bool Active { get; private set; }

        public MapDetail MapDetail { get; private set; }

        public AddressBook Address { get; private set; }

        public DateTimeOffset DateAdded { get; private set; }
    }
}

file[69] = Domain\EventInspection.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventInspection
    {
        public EventInspection(int eventId, bool vehicleStandardsInspected, bool vehicleStandardsPassed, int vehicleStandardsLevel, string vehicleStandardsEquipment, bool permitInspected, string permit, bool massInspected, bool massGenerateWeighingNotice, string massWeighingNoticeMediaRef, string massWeighingNoticeNumber, string massAxleConfiguration, string massWeighingCategory, string massWeighingMethod, bool massBridgeCalibratedZeroed, bool massConformingSite, bool massDriverViewedWeighing, string massOperatorCourseOfTrade, string massDriverStatusToOwner, string massDriverInstructedBy, string massPublicTrade, string massGrossEndAndEnd, string massWitnessName, string massWitnessPhoneNumber, string massComment, int weighingDataStepCount, decimal weighingDataExtremeAxleDistance, decimal weighingDataCombinedWeight, decimal weighingDataDefaultAllowedWeight, decimal weighingDataAllowedWeight, decimal weighingDataMassAdjustment, decimal weighingDataMassAdjustmentPerStep, decimal weighingDataPercentageOfAllowed, string weighingDataPermit, string weighBridgeName, DateTimeOffset? weighBridgeExpiry, DateTimeOffset? weighBridgeConfigureDate, string weighBridgeLocation, bool dimensionsInspected, bool dimensionsPassed, decimal dimensionsHeight, decimal dimensionsWidth, decimal dimensionsLength, decimal dimensionsRearOverhang, string dimensionsMeasuringInstrument, string dimensionsProjection, string dimensionsSingleVehicle, bool loadRestraintInspected, bool loadRestraintPassed, string loadRestraintNote, bool active)
        {
            if(string.IsNullOrWhiteSpace(vehicleStandardsEquipment))
                throw new ArgumentException("Must include a value for Vehicle Standards Equipment");
            if(string.IsNullOrWhiteSpace(permit))
                throw new ArgumentException("Must include a value for Permit");
            if(string.IsNullOrWhiteSpace(massWeighingNoticeMediaRef))
                throw new ArgumentException("Must include a value for Mass Weighing Notice Media Ref");
            if(string.IsNullOrWhiteSpace(massWeighingNoticeNumber))
                throw new ArgumentException("Must include a value for Mass Weighing Notice Number");
            if(string.IsNullOrWhiteSpace(massAxleConfiguration))
                throw new ArgumentException("Must include a value for Mass Axle Configuration");
            if(string.IsNullOrWhiteSpace(massWeighingCategory))
                throw new ArgumentException("Must include a value for Mass Weighing Category");
            if(string.IsNullOrWhiteSpace(massWeighingMethod))
                throw new ArgumentException("Must include a value for Mass Weighing Method");
            if(string.IsNullOrWhiteSpace(massOperatorCourseOfTrade))
                throw new ArgumentException("Must include a value for Mass Operator Course of Trade");
            if(string.IsNullOrWhiteSpace(massDriverStatusToOwner))
                throw new ArgumentException("Must include a value for Mass Driver Status to Owner");
            if(string.IsNullOrWhiteSpace(massDriverInstructedBy))
                throw new ArgumentException("Must include a value for Mass Driver Instructed by");
            if(string.IsNullOrWhiteSpace(massPublicTrade))
                throw new ArgumentException("Must include a value for Mass Public Trade");
            if(string.IsNullOrWhiteSpace(massGrossEndAndEnd))
                throw new ArgumentException("Must include a value for Mass Gross End and End");
            if(string.IsNullOrWhiteSpace(massWitnessName))
                throw new ArgumentException("Must include a value for Mass Witness Name");
            if(string.IsNullOrWhiteSpace(massWitnessPhoneNumber))
                throw new ArgumentException("Must include a value for Mass Witness Phone Number");
            if(string.IsNullOrWhiteSpace(massComment))
                throw new ArgumentException("Must include a value for Mass Comment");
            if(string.IsNullOrWhiteSpace(weighingDataPermit))
                throw new ArgumentException("Must include a value for Weighing Data Permit");
            if(string.IsNullOrWhiteSpace(weighBridgeName))
                throw new ArgumentException("Must include a value for Weigh Bridge Name");
            if(string.IsNullOrWhiteSpace(weighBridgeLocation))
                throw new ArgumentException("Must include a value for Weigh Bridge Location");
            if(string.IsNullOrWhiteSpace(dimensionsMeasuringInstrument))
                throw new ArgumentException("Must include a value for Dimensions Measuring Instrument");
            if(string.IsNullOrWhiteSpace(dimensionsProjection))
                throw new ArgumentException("Must include a value for Dimensions Projection");
            if(string.IsNullOrWhiteSpace(dimensionsSingleVehicle))
                throw new ArgumentException("Must include a value for Dimensions Single Vehicle");
            if(string.IsNullOrWhiteSpace(loadRestraintNote))
                throw new ArgumentException("Must include a value for Load Restraint Note");
            EventId = eventId;
            VehicleStandardsInspected = vehicleStandardsInspected;
            VehicleStandardsPassed = vehicleStandardsPassed;
            VehicleStandardsLevel = vehicleStandardsLevel;
            VehicleStandardsEquipment = vehicleStandardsEquipment;
            PermitInspected = permitInspected;
            Permit = permit;
            MassInspected = massInspected;
            MassGenerateWeighingNotice = massGenerateWeighingNotice;
            MassWeighingNoticeMediaRef = massWeighingNoticeMediaRef;
            MassWeighingNoticeNumber = massWeighingNoticeNumber;
            MassAxleConfiguration = massAxleConfiguration;
            MassWeighingCategory = massWeighingCategory;
            MassWeighingMethod = massWeighingMethod;
            MassBridgeCalibratedZeroed = massBridgeCalibratedZeroed;
            MassConformingSite = massConformingSite;
            MassDriverViewedWeighing = massDriverViewedWeighing;
            MassOperatorCourseOfTrade = massOperatorCourseOfTrade;
            MassDriverStatusToOwner = massDriverStatusToOwner;
            MassDriverInstructedBy = massDriverInstructedBy;
            MassPublicTrade = massPublicTrade;
            MassGrossEndAndEnd = massGrossEndAndEnd;
            MassWitnessName = massWitnessName;
            MassWitnessPhoneNumber = massWitnessPhoneNumber;
            MassComment = massComment;
            WeighingDataStepCount = weighingDataStepCount;
            WeighingDataExtremeAxleDistance = weighingDataExtremeAxleDistance;
            WeighingDataCombinedWeight = weighingDataCombinedWeight;
            WeighingDataDefaultAllowedWeight = weighingDataDefaultAllowedWeight;
            WeighingDataAllowedWeight = weighingDataAllowedWeight;
            WeighingDataMassAdjustment = weighingDataMassAdjustment;
            WeighingDataMassAdjustmentPerStep = weighingDataMassAdjustmentPerStep;
            WeighingDataPercentageOfAllowed = weighingDataPercentageOfAllowed;
            WeighingDataPermit = weighingDataPermit;
            WeighBridgeName = weighBridgeName;
            WeighBridgeExpiry = weighBridgeExpiry;
            WeighBridgeConfigureDate = weighBridgeConfigureDate;
            WeighBridgeLocation = weighBridgeLocation;
            DimensionsInspected = dimensionsInspected;
            DimensionsPassed = dimensionsPassed;
            DimensionsHeight = dimensionsHeight;
            DimensionsWidth = dimensionsWidth;
            DimensionsLength = dimensionsLength;
            DimensionsRearOverhang = dimensionsRearOverhang;
            DimensionsMeasuringInstrument = dimensionsMeasuringInstrument;
            DimensionsProjection = dimensionsProjection;
            DimensionsSingleVehicle = dimensionsSingleVehicle;
            LoadRestraintInspected = loadRestraintInspected;
            LoadRestraintPassed = loadRestraintPassed;
            LoadRestraintNote = loadRestraintNote;
            Active = active;
        }

    }
}

file[70] = Domain\EventInspection.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventInspection
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public bool VehicleStandardsInspected { get; private set; }

        public bool VehicleStandardsPassed { get; private set; }

        public int VehicleStandardsLevel { get; private set; }

        public string VehicleStandardsEquipment { get; private set; }

        public bool PermitInspected { get; private set; }

        public string Permit { get; private set; }

        public bool MassInspected { get; private set; }

        public bool MassGenerateWeighingNotice { get; private set; }

        public string MassWeighingNoticeMediaRef { get; private set; }

        public string MassWeighingNoticeNumber { get; private set; }

        public string MassAxleConfiguration { get; private set; }

        public string MassWeighingCategory { get; private set; }

        public string MassWeighingMethod { get; private set; }

        public bool MassBridgeCalibratedZeroed { get; private set; }

        public bool MassConformingSite { get; private set; }

        public bool MassDriverViewedWeighing { get; private set; }

        public string MassOperatorCourseOfTrade { get; private set; }

        public string MassDriverStatusToOwner { get; private set; }

        public string MassDriverInstructedBy { get; private set; }

        public string MassPublicTrade { get; private set; }

        public string MassGrossEndAndEnd { get; private set; }

        public string MassWitnessName { get; private set; }

        public string MassWitnessPhoneNumber { get; private set; }

        public string MassComment { get; private set; }

        public int WeighingDataStepCount { get; private set; }

        public decimal WeighingDataExtremeAxleDistance { get; private set; }

        public decimal WeighingDataCombinedWeight { get; private set; }

        public decimal WeighingDataDefaultAllowedWeight { get; private set; }

        public decimal WeighingDataAllowedWeight { get; private set; }

        public decimal WeighingDataMassAdjustment { get; private set; }

        public decimal WeighingDataMassAdjustmentPerStep { get; private set; }

        public decimal WeighingDataPercentageOfAllowed { get; private set; }

        public string WeighingDataPermit { get; private set; }

        public string WeighBridgeName { get; private set; }

        public DateTimeOffset? WeighBridgeExpiry { get; private set; }

        public DateTimeOffset? WeighBridgeConfigureDate { get; private set; }

        public string WeighBridgeLocation { get; private set; }

        public bool DimensionsInspected { get; private set; }

        public bool DimensionsPassed { get; private set; }

        public decimal DimensionsHeight { get; private set; }

        public decimal DimensionsWidth { get; private set; }

        public decimal DimensionsLength { get; private set; }

        public decimal DimensionsRearOverhang { get; private set; }

        public string DimensionsMeasuringInstrument { get; private set; }

        public string DimensionsProjection { get; private set; }

        public string DimensionsSingleVehicle { get; private set; }

        public bool LoadRestraintInspected { get; private set; }

        public bool LoadRestraintPassed { get; private set; }

        public string LoadRestraintNote { get; private set; }

        public bool Active { get; private set; }
    }
}

file[71] = Domain\EventInspectionAxleGroup.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventInspectionAxleGroup
    {
        public EventInspectionAxleGroup(int eventInspectionId, decimal defaultMassAdjustment, decimal massAdjustment, int wheelCount, decimal combinedWeight, decimal percentageOfAllowed, decimal allowedWeight, decimal defaultAllowedWeight, bool active)
        {
            EventInspectionId = eventInspectionId;
            DefaultMassAdjustment = defaultMassAdjustment;
            MassAdjustment = massAdjustment;
            WheelCount = wheelCount;
            CombinedWeight = combinedWeight;
            PercentageOfAllowed = percentageOfAllowed;
            AllowedWeight = allowedWeight;
            DefaultAllowedWeight = defaultAllowedWeight;
            Active = active;
        }

    }
}

file[72] = Domain\EventInspectionAxleGroup.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventInspectionAxleGroup
    {
        public int Id { get; private set; }

        public int EventInspectionId { get; private set; }

        public decimal DefaultMassAdjustment { get; private set; }

        public decimal MassAdjustment { get; private set; }

        public int WheelCount { get; private set; }

        public decimal CombinedWeight { get; private set; }

        public decimal PercentageOfAllowed { get; private set; }

        public decimal AllowedWeight { get; private set; }

        public decimal DefaultAllowedWeight { get; private set; }

        public bool Active { get; private set; }
    }
}

file[73] = Domain\EventInspectionAxleWeight.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventInspectionAxleWeight
    {
        public EventInspectionAxleWeight(int eventInspectionAxleGroupId, decimal axleOffset, decimal offSide, decimal nearSide, decimal combinedWeight, decimal distanceBetweenAxle, bool isCustom, bool active)
        {
            EventInspectionAxleGroupId = eventInspectionAxleGroupId;
            AxleOffset = axleOffset;
            OffSide = offSide;
            NearSide = nearSide;
            CombinedWeight = combinedWeight;
            DistanceBetweenAxle = distanceBetweenAxle;
            IsCustom = isCustom;
            Active = active;
        }

    }
}

file[74] = Domain\EventInspectionAxleWeight.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventInspectionAxleWeight
    {
        public int Id { get; private set; }

        public int EventInspectionAxleGroupId { get; private set; }

        public decimal AxleOffset { get; private set; }

        public decimal OffSide { get; private set; }

        public decimal NearSide { get; private set; }

        public decimal CombinedWeight { get; private set; }

        public decimal DistanceBetweenAxle { get; private set; }

        public bool IsCustom { get; private set; }

        public bool Active { get; private set; }
    }
}

file[75] = Domain\EventInspectionAxleWeightPwd.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventInspectionAxleWeightPwd
    {
        public EventInspectionAxleWeightPwd(int eventInspectionAxleWeightId, string number, DateTimeOffset? expiry, bool active)
        {
            if(string.IsNullOrWhiteSpace(number))
                throw new ArgumentException("Must include a value for Number");
            EventInspectionAxleWeightId = eventInspectionAxleWeightId;
            Number = number;
            Expiry = expiry;
            Active = active;
        }

    }
}

file[76] = Domain\EventInspectionAxleWeightPwd.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventInspectionAxleWeightPwd
    {
        public int Id { get; private set; }

        public int EventInspectionAxleWeightId { get; private set; }

        public string Number { get; private set; }

        public DateTimeOffset? Expiry { get; private set; }

        public bool Active { get; private set; }
    }
}

file[77] = Domain\EventInspectionMovement.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventInspectionMovement
    {
        public EventInspectionMovement(int eventInspectionId, decimal foundWeight, decimal percentageOfAllowed, decimal massAdjustment, decimal allowedWeight, bool active)
        {
            EventInspectionId = eventInspectionId;
            FoundWeight = foundWeight;
            PercentageOfAllowed = percentageOfAllowed;
            MassAdjustment = massAdjustment;
            AllowedWeight = allowedWeight;
            Active = active;
        }

    }
}

file[78] = Domain\EventInspectionMovement.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventInspectionMovement
    {
        public int Id { get; private set; }

        public int EventInspectionId { get; private set; }

        public decimal FoundWeight { get; private set; }

        public decimal PercentageOfAllowed { get; private set; }

        public decimal MassAdjustment { get; private set; }

        public decimal AllowedWeight { get; private set; }

        public bool Active { get; private set; }
    }
}

file[79] = Domain\EventMediaExternal.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventMediaExternal
    {
        public EventMediaExternal(int eventId, string type, string uri, bool active)
        {
            if(string.IsNullOrWhiteSpace(type))
                throw new ArgumentException("Must include a value for Type");
            if(string.IsNullOrWhiteSpace(uri))
                throw new ArgumentException("Must include a value for Uri");
            EventId = eventId;
            Type = type;
            Uri = uri;
            Active = active;
        }

    }
}

file[80] = Domain\EventMediaExternal.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventMediaExternal
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public string Type { get; private set; }

        public string Uri { get; private set; }

        public bool Active { get; private set; }
    }
}

file[81] = Domain\EventMedium.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventMedium
    {
        public EventMedium(int eventId, Guid referenceId, string description, string mimeType, string fileName, bool inPerson, Guid thumbnailReferenceId, bool active)
        {
            if(string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Must include a value for Description");
            if(string.IsNullOrWhiteSpace(mimeType))
                throw new ArgumentException("Must include a value for Mime Type");
            if(string.IsNullOrWhiteSpace(fileName))
                throw new ArgumentException("Must include a value for File Name");
            EventId = eventId;
            ReferenceId = referenceId;
            Description = description;
            MimeType = mimeType;
            FileName = fileName;
            InPerson = inPerson;
            ThumbnailReferenceId = thumbnailReferenceId;
            Active = active;
        }

    }
}

file[82] = Domain\EventMedium.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventMedium
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public Guid ReferenceId { get; private set; }

        public string Description { get; private set; }

        public string MimeType { get; private set; }

        public string FileName { get; private set; }

        public bool InPerson { get; private set; }

        public Guid ThumbnailReferenceId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[83] = Domain\EventNote.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventNote
    {
        public EventNote(int eventId, string textValue, DateTimeOffset? recordedDate, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(textValue))
                throw new ArgumentException("Must include a value for Text Value");
            EventId = eventId;
            TextValue = textValue;
            RecordedDate = recordedDate;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[84] = Domain\EventNote.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventNote
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public string TextValue { get; private set; }

        public DateTimeOffset? RecordedDate { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[85] = Domain\EventOfficer.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventOfficer
    {
        public EventOfficer(int eventId, int userId, int eventOfficerTypeId, string homeStation, string authorityNumber, string firstName, string surname, bool active)
        {
            if(string.IsNullOrWhiteSpace(homeStation))
                throw new ArgumentException("Must include a value for Home Station");
            if(string.IsNullOrWhiteSpace(authorityNumber))
                throw new ArgumentException("Must include a value for Authority Number");
            if(string.IsNullOrWhiteSpace(firstName))
                throw new ArgumentException("Must include a value for First Name");
            if(string.IsNullOrWhiteSpace(surname))
                throw new ArgumentException("Must include a value for Surname");
            EventId = eventId;
            UserId = userId;
            EventOfficerTypeId = eventOfficerTypeId;
            HomeStation = homeStation;
            AuthorityNumber = authorityNumber;
            FirstName = firstName;
            Surname = surname;
            Active = active;
        }

    }
}

file[86] = Domain\EventOfficer.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventOfficer
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int UserId { get; private set; }

        public int EventOfficerTypeId { get; private set; }

        public string HomeStation { get; private set; }

        public string AuthorityNumber { get; private set; }

        public string FirstName { get; private set; }

        public string Surname { get; private set; }

        public bool Active { get; private set; }
    }
}

file[87] = Domain\EventOrganisation.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventOrganisation
    {
        public EventOrganisation(int eventId, int organisationId, int eventOrganisationTypeId, bool active)
        {
            EventId = eventId;
            OrganisationId = organisationId;
            EventOrganisationTypeId = eventOrganisationTypeId;
            Active = active;
        }

    }
}

file[88] = Domain\EventOrganisation.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventOrganisation
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int OrganisationId { get; private set; }

        public int EventOrganisationTypeId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[89] = Domain\EventPerson.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventPerson
    {
        public EventPerson(int eventId, int personId, int eventPersonTypeId, bool active)
        {
            EventId = eventId;
            PersonId = personId;
            EventPersonTypeId = eventPersonTypeId;
            Active = active;
        }

    }
}

file[90] = Domain\EventPerson.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventPerson
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int PersonId { get; private set; }

        public int EventPersonTypeId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[91] = Domain\EventPersonDiary.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventPersonDiary
    {
        public EventPersonDiary(int eventId, int personId, bool presented, string otherReason, bool other, bool lessThan100km, bool lessThan160km, bool lessThan12ton, string type, string bookNumber, string pageNumber, int stateId, DateTimeOffset? issueDate, string electronicId, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(otherReason))
                throw new ArgumentException("Must include a value for Other Reason");
            if(string.IsNullOrWhiteSpace(type))
                throw new ArgumentException("Must include a value for Type");
            if(string.IsNullOrWhiteSpace(bookNumber))
                throw new ArgumentException("Must include a value for Book Number");
            if(string.IsNullOrWhiteSpace(pageNumber))
                throw new ArgumentException("Must include a value for Page Number");
            if(string.IsNullOrWhiteSpace(electronicId))
                throw new ArgumentException("Must include a value for Electronic Id");
            EventId = eventId;
            PersonId = personId;
            Presented = presented;
            OtherReason = otherReason;
            Other = other;
            LessThan100km = lessThan100km;
            LessThan160km = lessThan160km;
            LessThan12ton = lessThan12ton;
            Type = type;
            BookNumber = bookNumber;
            PageNumber = pageNumber;
            StateId = stateId;
            IssueDate = issueDate;
            ElectronicId = electronicId;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[92] = Domain\EventPersonDiary.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventPersonDiary
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int PersonId { get; private set; }

        public bool Presented { get; private set; }

        public string OtherReason { get; private set; }

        public bool Other { get; private set; }

        public bool LessThan100km { get; private set; }

        public bool LessThan160km { get; private set; }

        public bool LessThan12ton { get; private set; }

        public string Type { get; private set; }

        public string BookNumber { get; private set; }

        public string PageNumber { get; private set; }

        public int StateId { get; private set; }

        public DateTimeOffset? IssueDate { get; private set; }

        public string ElectronicId { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[93] = Domain\EventPersonFatigue.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventPersonFatigue
    {
        public EventPersonFatigue(int eventId, int personId, string regulated, bool appearFatigued, string driverHomeLocation, string recordKeeperName, string recordKeeperLocation, string accreditationNumber, string scheduler, bool active)
        {
            if(string.IsNullOrWhiteSpace(regulated))
                throw new ArgumentException("Must include a value for Regulated");
            if(string.IsNullOrWhiteSpace(driverHomeLocation))
                throw new ArgumentException("Must include a value for Driver Home Location");
            if(string.IsNullOrWhiteSpace(recordKeeperName))
                throw new ArgumentException("Must include a value for Record Keeper Name");
            if(string.IsNullOrWhiteSpace(recordKeeperLocation))
                throw new ArgumentException("Must include a value for Record Keeper Location");
            if(string.IsNullOrWhiteSpace(accreditationNumber))
                throw new ArgumentException("Must include a value for Accreditation Number");
            if(string.IsNullOrWhiteSpace(scheduler))
                throw new ArgumentException("Must include a value for Scheduler");
            EventId = eventId;
            PersonId = personId;
            Regulated = regulated;
            AppearFatigued = appearFatigued;
            DriverHomeLocation = driverHomeLocation;
            RecordKeeperName = recordKeeperName;
            RecordKeeperLocation = recordKeeperLocation;
            AccreditationNumber = accreditationNumber;
            Scheduler = scheduler;
            Active = active;
        }

    }
}

file[94] = Domain\EventPersonFatigue.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventPersonFatigue
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int PersonId { get; private set; }

        public string Regulated { get; private set; }

        public bool AppearFatigued { get; private set; }

        public string DriverHomeLocation { get; private set; }

        public string RecordKeeperName { get; private set; }

        public string RecordKeeperLocation { get; private set; }

        public string AccreditationNumber { get; private set; }

        public string Scheduler { get; private set; }

        public bool Active { get; private set; }
    }
}

file[95] = Domain\EventVehicle.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventVehicle
    {
        public EventVehicle(int eventId, int vehicleId, int eventVehicleTypeId, bool active)
        {
            EventId = eventId;
            VehicleId = vehicleId;
            EventVehicleTypeId = eventVehicleTypeId;
            Active = active;
        }

    }
}

file[96] = Domain\EventVehicle.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventVehicle
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int VehicleId { get; private set; }

        public int EventVehicleTypeId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[97] = Domain\EventVehicleConcession.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventVehicleConcession
    {
        public EventVehicleConcession(int eventId, int vehicleId, string code, string description, bool active)
        {
            if(string.IsNullOrWhiteSpace(code))
                throw new ArgumentException("Must include a value for Code");
            if(string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Must include a value for Description");
            EventId = eventId;
            VehicleId = vehicleId;
            Code = code;
            Description = description;
            Active = active;
        }

    }
}

file[98] = Domain\EventVehicleConcession.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventVehicleConcession
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int VehicleId { get; private set; }

        public string Code { get; private set; }

        public string Description { get; private set; }

        public bool Active { get; private set; }
    }
}

file[99] = Domain\EventVehicleCondition.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventVehicleCondition
    {
        public EventVehicleCondition(int eventId, int vehicleId, string type, string description, bool active)
        {
            if(string.IsNullOrWhiteSpace(type))
                throw new ArgumentException("Must include a value for Type");
            if(string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Must include a value for Description");
            EventId = eventId;
            VehicleId = vehicleId;
            Type = type;
            Description = description;
            Active = active;
        }

    }
}

file[100] = Domain\EventVehicleCondition.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventVehicleCondition
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int VehicleId { get; private set; }

        public string Type { get; private set; }

        public string Description { get; private set; }

        public bool Active { get; private set; }
    }
}

file[101] = Domain\EventVehicleScheme.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class EventVehicleScheme
    {
        public EventVehicleScheme(int eventId, int vehicleId, string module, string number, DateTimeOffset? expiryDate, bool active)
        {
            if(string.IsNullOrWhiteSpace(module))
                throw new ArgumentException("Must include a value for Module");
            if(string.IsNullOrWhiteSpace(number))
                throw new ArgumentException("Must include a value for Number");
            EventId = eventId;
            VehicleId = vehicleId;
            Module = module;
            Number = number;
            ExpiryDate = expiryDate;
            Active = active;
        }

    }
}

file[102] = Domain\EventVehicleScheme.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class EventVehicleScheme
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int VehicleId { get; private set; }

        public string Module { get; private set; }

        public string Number { get; private set; }

        public DateTimeOffset? ExpiryDate { get; private set; }

        public bool Active { get; private set; }
    }
}

file[103] = Domain\Intercept.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class Intercept
    {
        public Intercept(int eventId, string interceptNumber)
        {
            if(string.IsNullOrWhiteSpace(interceptNumber))
                throw new ArgumentException("Must include a value for Intercept Number");
            EventId = eventId;
            InterceptNumber = interceptNumber;
        }

    }
}

file[104] = Domain\Intercept.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class Intercept
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public string InterceptNumber { get; private set; }
    }
}

file[105] = Domain\InterceptImport.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class InterceptImport
    {
        public InterceptImport(int vehicleRegistrationStateId, string vehicleRegistrationNumber, string personGivenName, string personFamilyName, DateTimeOffset? personDateOfBirth, string personLicenceNumber, int personLicenceStateId, string organisationAcn, string organisationIncorporatedNumber, string interceptNumber, DateTimeOffset? dateIssued, int stateId, string vehicleInfo, string noticesDescription, bool hasNotice, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(vehicleRegistrationNumber))
                throw new ArgumentException("Must include a value for Vehicle Registration Number");
            if(string.IsNullOrWhiteSpace(personGivenName))
                throw new ArgumentException("Must include a value for Person Given Name");
            if(string.IsNullOrWhiteSpace(personFamilyName))
                throw new ArgumentException("Must include a value for Person Family Name");
            if(string.IsNullOrWhiteSpace(personLicenceNumber))
                throw new ArgumentException("Must include a value for Person Licence Number");
            if(string.IsNullOrWhiteSpace(organisationAcn))
                throw new ArgumentException("Must include a value for Organisation Acn");
            if(string.IsNullOrWhiteSpace(organisationIncorporatedNumber))
                throw new ArgumentException("Must include a value for Organisation Incorporated Number");
            if(string.IsNullOrWhiteSpace(interceptNumber))
                throw new ArgumentException("Must include a value for Intercept Number");
            if(string.IsNullOrWhiteSpace(vehicleInfo))
                throw new ArgumentException("Must include a value for Vehicle Info");
            if(string.IsNullOrWhiteSpace(noticesDescription))
                throw new ArgumentException("Must include a value for Notices Description");
            VehicleRegistrationStateId = vehicleRegistrationStateId;
            VehicleRegistrationNumber = vehicleRegistrationNumber;
            PersonGivenName = personGivenName;
            PersonFamilyName = personFamilyName;
            PersonDateOfBirth = personDateOfBirth;
            PersonLicenceNumber = personLicenceNumber;
            PersonLicenceStateId = personLicenceStateId;
            OrganisationAcn = organisationAcn;
            OrganisationIncorporatedNumber = organisationIncorporatedNumber;
            InterceptNumber = interceptNumber;
            DateIssued = dateIssued;
            StateId = stateId;
            VehicleInfo = vehicleInfo;
            NoticesDescription = noticesDescription;
            HasNotice = hasNotice;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[106] = Domain\InterceptImport.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class InterceptImport
    {
        public int Id { get; private set; }

        public int VehicleRegistrationStateId { get; private set; }

        public string VehicleRegistrationNumber { get; private set; }

        public string PersonGivenName { get; private set; }

        public string PersonFamilyName { get; private set; }

        public DateTimeOffset? PersonDateOfBirth { get; private set; }

        public string PersonLicenceNumber { get; private set; }

        public int PersonLicenceStateId { get; private set; }

        public string OrganisationAcn { get; private set; }

        public string OrganisationIncorporatedNumber { get; private set; }

        public string InterceptNumber { get; private set; }

        public DateTimeOffset? DateIssued { get; private set; }

        public int StateId { get; private set; }

        public string VehicleInfo { get; private set; }

        public string NoticesDescription { get; private set; }

        public bool HasNotice { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[107] = Domain\InterceptJourney.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class InterceptJourney
    {
        public InterceptJourney(int interceptId, string industrySector, string startingLocation, string endLocation, string consignor, string consignorLocation, string loader, string loaderLocation, string consignee, string consigneeLocation, bool photosProvided, string driverEmployer, string loadedGood, string loadedOther, decimal odometer, int systemId)
        {
            if(string.IsNullOrWhiteSpace(industrySector))
                throw new ArgumentException("Must include a value for Industry Sector");
            if(string.IsNullOrWhiteSpace(startingLocation))
                throw new ArgumentException("Must include a value for Starting Location");
            if(string.IsNullOrWhiteSpace(endLocation))
                throw new ArgumentException("Must include a value for End Location");
            if(string.IsNullOrWhiteSpace(consignor))
                throw new ArgumentException("Must include a value for Consignor");
            if(string.IsNullOrWhiteSpace(consignorLocation))
                throw new ArgumentException("Must include a value for Consignor Location");
            if(string.IsNullOrWhiteSpace(loader))
                throw new ArgumentException("Must include a value for Loader");
            if(string.IsNullOrWhiteSpace(loaderLocation))
                throw new ArgumentException("Must include a value for Loader Location");
            if(string.IsNullOrWhiteSpace(consignee))
                throw new ArgumentException("Must include a value for Consignee");
            if(string.IsNullOrWhiteSpace(consigneeLocation))
                throw new ArgumentException("Must include a value for Consignee Location");
            if(string.IsNullOrWhiteSpace(driverEmployer))
                throw new ArgumentException("Must include a value for Driver Employer");
            if(string.IsNullOrWhiteSpace(loadedGood))
                throw new ArgumentException("Must include a value for Loaded Good");
            if(string.IsNullOrWhiteSpace(loadedOther))
                throw new ArgumentException("Must include a value for Loaded Other");
            InterceptId = interceptId;
            IndustrySector = industrySector;
            StartingLocation = startingLocation;
            EndLocation = endLocation;
            Consignor = consignor;
            ConsignorLocation = consignorLocation;
            Loader = loader;
            LoaderLocation = loaderLocation;
            Consignee = consignee;
            ConsigneeLocation = consigneeLocation;
            PhotosProvided = photosProvided;
            DriverEmployer = driverEmployer;
            LoadedGood = loadedGood;
            LoadedOther = loadedOther;
            Odometer = odometer;
            SystemId = systemId;
        }

    }
}

file[108] = Domain\InterceptJourney.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class InterceptJourney
    {
        public int Id { get; private set; }

        public int InterceptId { get; private set; }

        public string IndustrySector { get; private set; }

        public string StartingLocation { get; private set; }

        public string EndLocation { get; private set; }

        public string Consignor { get; private set; }

        public string ConsignorLocation { get; private set; }

        public string Loader { get; private set; }

        public string LoaderLocation { get; private set; }

        public string Consignee { get; private set; }

        public string ConsigneeLocation { get; private set; }

        public bool PhotosProvided { get; private set; }

        public string DriverEmployer { get; private set; }

        public string LoadedGood { get; private set; }

        public string LoadedOther { get; private set; }

        public decimal Odometer { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[109] = Domain\InterceptOrganisation.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class InterceptOrganisation
    {
        public InterceptOrganisation(int interceptId, int organisationId, bool active)
        {
            InterceptId = interceptId;
            OrganisationId = organisationId;
            Active = active;
        }

    }
}

file[110] = Domain\InterceptOrganisation.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class InterceptOrganisation
    {
        public int Id { get; private set; }

        public int InterceptId { get; private set; }

        public int OrganisationId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[111] = Domain\InterceptPerson.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class InterceptPerson
    {
        public InterceptPerson(int interceptId, int personId, bool active)
        {
            InterceptId = interceptId;
            PersonId = personId;
            Active = active;
        }

    }
}

file[112] = Domain\InterceptPerson.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class InterceptPerson
    {
        public int Id { get; private set; }

        public int InterceptId { get; private set; }

        public int PersonId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[113] = Domain\InterceptVehicle.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class InterceptVehicle
    {
        public InterceptVehicle(int interceptId, int vehicleId, bool active)
        {
            InterceptId = interceptId;
            VehicleId = vehicleId;
            Active = active;
        }

    }
}

file[114] = Domain\InterceptVehicle.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class InterceptVehicle
    {
        public int Id { get; private set; }

        public int InterceptId { get; private set; }

        public int VehicleId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[115] = Domain\Log.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class Log
    {
        public Log(int logTypeId, int logLevelTypeId, int logComponentTypeId, int userId, string signInName, int organisationId, string source, DateTimeOffset? eventDate, string deviceId, string message, string exception, string requestId, string requestBody, string responseBody, int duration, string clientVersion)
        {
            if(string.IsNullOrWhiteSpace(signInName))
                throw new ArgumentException("Must include a value for Sign in Name");
            if(string.IsNullOrWhiteSpace(source))
                throw new ArgumentException("Must include a value for Source");
            if(string.IsNullOrWhiteSpace(deviceId))
                throw new ArgumentException("Must include a value for Device Id");
            if(string.IsNullOrWhiteSpace(message))
                throw new ArgumentException("Must include a value for Message");
            if(string.IsNullOrWhiteSpace(exception))
                throw new ArgumentException("Must include a value for Exception");
            if(string.IsNullOrWhiteSpace(requestId))
                throw new ArgumentException("Must include a value for Request Id");
            if(string.IsNullOrWhiteSpace(requestBody))
                throw new ArgumentException("Must include a value for Request Body");
            if(string.IsNullOrWhiteSpace(responseBody))
                throw new ArgumentException("Must include a value for Response Body");
            if(string.IsNullOrWhiteSpace(clientVersion))
                throw new ArgumentException("Must include a value for Client Version");
            LogTypeId = logTypeId;
            LogLevelTypeId = logLevelTypeId;
            LogComponentTypeId = logComponentTypeId;
            UserId = userId;
            SignInName = signInName;
            OrganisationId = organisationId;
            Source = source;
            EventDate = eventDate;
            DeviceId = deviceId;
            Message = message;
            Exception = exception;
            RequestId = requestId;
            RequestBody = requestBody;
            ResponseBody = responseBody;
            Duration = duration;
            ClientVersion = clientVersion;
        }

    }
}

file[116] = Domain\Log.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class Log
    {
        public int Id { get; private set; }

        public int LogTypeId { get; private set; }

        public int LogLevelTypeId { get; private set; }

        public int LogComponentTypeId { get; private set; }

        public int UserId { get; private set; }

        public string SignInName { get; private set; }

        public int OrganisationId { get; private set; }

        public string Source { get; private set; }

        public DateTimeOffset? EventDate { get; private set; }

        public string DeviceId { get; private set; }

        public string Message { get; private set; }

        public string Exception { get; private set; }

        public string RequestId { get; private set; }

        public string RequestBody { get; private set; }

        public string ResponseBody { get; private set; }

        public int Duration { get; private set; }

        public string ClientVersion { get; private set; }
    }
}

file[117] = Domain\MapDetail.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class MapDetail
    {
        public MapDetail(decimal? altitude, decimal? altitudeAccuracy, decimal? horizontalAccuracy, decimal? longitude, decimal? latitude, decimal? elevation)
        {
            Altitude = altitude;
            AltitudeAccuracy = altitudeAccuracy;
            HorizontalAccuracy = horizontalAccuracy;
            Longitude = longitude;
            Latitude = latitude;
            Elevation = elevation;
        }

    }
}

file[118] = Domain\MapDetail.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class MapDetail
    {
        public decimal? Altitude { get; private set; }

        public decimal? AltitudeAccuracy { get; private set; }

        public decimal? HorizontalAccuracy { get; private set; }

        public decimal? Longitude { get; private set; }

        public decimal? Latitude { get; private set; }

        public decimal? Elevation { get; private set; }
    }
}

file[119] = Domain\NoticeNumber.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class NoticeNumber
    {
        public NoticeNumber(int stateId, int noticeTypeId, string description, int startSequenceNumber, int lastSequenceNumber, string numberFormat, int perCallAllocation, bool active)
        {
            if(string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Must include a value for Description");
            if(string.IsNullOrWhiteSpace(numberFormat))
                throw new ArgumentException("Must include a value for Number Format");
            StateId = stateId;
            NoticeTypeId = noticeTypeId;
            Description = description;
            StartSequenceNumber = startSequenceNumber;
            LastSequenceNumber = lastSequenceNumber;
            NumberFormat = numberFormat;
            PerCallAllocation = perCallAllocation;
            Active = active;
        }

    }
}

file[120] = Domain\NoticeNumber.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class NoticeNumber : Aggregate<int>
    {
        public int StateId { get; private set; }

        public int NoticeTypeId { get; private set; }

        public string Description { get; private set; }

        public int StartSequenceNumber { get; private set; }

        public int LastSequenceNumber { get; private set; }

        public string NumberFormat { get; private set; }

        public int PerCallAllocation { get; private set; }

        public bool Active { get; private set; }
    }
}

file[121] = Domain\Organisation.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class Organisation
    {
        public Organisation(Guid? creationId, string name, string aCN, OrganisationTypes typeId, string? nevdisId, string? vicCustomerNo, int? parentId, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Must include a value for Name");
            if(string.IsNullOrWhiteSpace(aCN))
                throw new ArgumentException("Must include a value for ACN");
            CreationId = creationId;
            Name = name;
            ACN = aCN;
            TypeId = typeId;
            NevdisId = nevdisId;
            VicCustomerNo = vicCustomerNo;
            ParentId = parentId;
            Active = active;
            SystemId = systemId;
        }

        public partial void Search(string? name, string aCN)
        {
            // todo: Add Search behaviour here
        }

        public partial void Index(string id, string juro, bool includeSilentAlert)
        {
            // todo: Add Index behaviour here
        }

        public partial void Save(string name, string aCN, OrganisationTypes typeId, Guid? creationId)
        {
            // todo: Add Save behaviour here
        }

    }
}

file[122] = Domain\Organisation.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class Organisation : Aggregate<int>
    {
        public Guid? CreationId { get; private set; }

        public string Name { get; private set; }

        public string ACN { get; private set; }

        public OrganisationTypes TypeId { get; private set; }

        public string? NevdisId { get; private set; }

        public string? VicCustomerNo { get; private set; }

        public int? ParentId { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }

        public partial void Search(string? name, string aCN);

        public partial void Index(string id, string juro, bool includeSilentAlert);

        public partial void Save(string name, string aCN, OrganisationTypes typeId, Guid? creationId);
    }
}

file[123] = Domain\OrganisationAddress.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class OrganisationAddress
    {
        public OrganisationAddress(int organisationId, int eventId, int addressTypeId, string localGovernmentArea, string lgashortTitle, string near, string commonName, string remark, int stateId, bool active, string source, MapDetail mapDetail, AddressBook address, DateTimeOffset? dateAdded)
        {
            if(string.IsNullOrWhiteSpace(localGovernmentArea))
                throw new ArgumentException("Must include a value for Local Government Area");
            if(string.IsNullOrWhiteSpace(lgashortTitle))
                throw new ArgumentException("Must include a value for Lgashort Title");
            if(string.IsNullOrWhiteSpace(near))
                throw new ArgumentException("Must include a value for Near");
            if(string.IsNullOrWhiteSpace(commonName))
                throw new ArgumentException("Must include a value for Common Name");
            if(string.IsNullOrWhiteSpace(remark))
                throw new ArgumentException("Must include a value for Remark");
            if(string.IsNullOrWhiteSpace(source))
                throw new ArgumentException("Must include a value for Source");
            OrganisationId = organisationId;
            EventId = eventId;
            AddressTypeId = addressTypeId;
            LocalGovernmentArea = localGovernmentArea;
            LgashortTitle = lgashortTitle;
            Near = near;
            CommonName = commonName;
            Remark = remark;
            StateId = stateId;
            Active = active;
            Source = source;
            MapDetail = mapDetail;
            Address = address;
            DateAdded = dateAdded;
        }

    }
}

file[124] = Domain\OrganisationAddress.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class OrganisationAddress
    {
        public int Id { get; private set; }

        public int OrganisationId { get; private set; }

        public int EventId { get; private set; }

        public int AddressTypeId { get; private set; }

        public string LocalGovernmentArea { get; private set; }

        public string LgashortTitle { get; private set; }

        public string Near { get; private set; }

        public string CommonName { get; private set; }

        public string Remark { get; private set; }

        public int StateId { get; private set; }

        public bool Active { get; private set; }

        public string Source { get; private set; }

        public MapDetail MapDetail { get; private set; }

        public AddressBook Address { get; private set; }

        public DateTimeOffset? DateAdded { get; private set; }
    }
}

file[125] = Domain\OrganisationContact.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class OrganisationContact
    {
        public OrganisationContact(int organisationId, int eventId, int contactTypeId, string contactValue, DateTimeOffset? dateAdded, bool active, string source)
        {
            if(string.IsNullOrWhiteSpace(contactValue))
                throw new ArgumentException("Must include a value for Contact Value");
            if(string.IsNullOrWhiteSpace(source))
                throw new ArgumentException("Must include a value for Source");
            OrganisationId = organisationId;
            EventId = eventId;
            ContactTypeId = contactTypeId;
            ContactValue = contactValue;
            DateAdded = dateAdded;
            Active = active;
            Source = source;
        }

    }
}

file[126] = Domain\OrganisationContact.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class OrganisationContact
    {
        public int Id { get; private set; }

        public int OrganisationId { get; private set; }

        public int EventId { get; private set; }

        public int ContactTypeId { get; private set; }

        public string ContactValue { get; private set; }

        public DateTimeOffset? DateAdded { get; private set; }

        public bool Active { get; private set; }

        public string Source { get; private set; }
    }
}

file[127] = Domain\OrganisationDetail.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class OrganisationDetail
    {
        public OrganisationDetail(int eventId, int organisationId, string name, string acn, string incorporatedNumber, int typeId, int stateId, string status, DateTimeOffset? dateOfRegistration, int alertLevel, int associatedAlertLevel, string source, bool active)
        {
            if(string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Must include a value for Name");
            if(string.IsNullOrWhiteSpace(acn))
                throw new ArgumentException("Must include a value for Acn");
            if(string.IsNullOrWhiteSpace(incorporatedNumber))
                throw new ArgumentException("Must include a value for Incorporated Number");
            if(string.IsNullOrWhiteSpace(status))
                throw new ArgumentException("Must include a value for Status");
            if(string.IsNullOrWhiteSpace(source))
                throw new ArgumentException("Must include a value for Source");
            EventId = eventId;
            OrganisationId = organisationId;
            Name = name;
            Acn = acn;
            IncorporatedNumber = incorporatedNumber;
            TypeId = typeId;
            StateId = stateId;
            Status = status;
            DateOfRegistration = dateOfRegistration;
            AlertLevel = alertLevel;
            AssociatedAlertLevel = associatedAlertLevel;
            Source = source;
            Active = active;
        }

    }
}

file[128] = Domain\OrganisationDetail.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class OrganisationDetail
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int OrganisationId { get; private set; }

        public string Name { get; private set; }

        public string Acn { get; private set; }

        public string IncorporatedNumber { get; private set; }

        public int TypeId { get; private set; }

        public int StateId { get; private set; }

        public string Status { get; private set; }

        public DateTimeOffset? DateOfRegistration { get; private set; }

        public int AlertLevel { get; private set; }

        public int AssociatedAlertLevel { get; private set; }

        public string Source { get; private set; }

        public bool Active { get; private set; }
    }
}

file[129] = Domain\Person.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class Person
    {
        public Person(Guid? creationId, string givenName, string familyName, DateTimeOffset dateOfBirth, string? licenceNumber, States licenceState, int systemId, bool active, string? sourcePersonId)
        {
            if(string.IsNullOrWhiteSpace(givenName))
                throw new ArgumentException("Must include a value for Given Name");
            if(string.IsNullOrWhiteSpace(familyName))
                throw new ArgumentException("Must include a value for Family Name");
            CreationId = creationId;
            GivenName = givenName;
            FamilyName = familyName;
            DateOfBirth = dateOfBirth;
            LicenceNumber = licenceNumber;
            LicenceState = licenceState;
            SystemId = systemId;
            Active = active;
            SourcePersonId = sourcePersonId;
        }

    }
}

file[130] = Domain\Person.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class Person : Aggregate<int>
    {
        public Guid? CreationId { get; private set; }

        public string GivenName { get; private set; }

        public string FamilyName { get; private set; }

        public DateTimeOffset DateOfBirth { get; private set; }

        public string? LicenceNumber { get; private set; }

        public States LicenceState { get; private set; }

        public int SystemId { get; private set; }

        public bool Active { get; private set; }

        public string? SourcePersonId { get; private set; }
    }
}

file[131] = Domain\PersonAddress.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class PersonAddress
    {
        public PersonAddress(int personId, int eventId, int stateId, int addressTypeId, string localGovernmentArea, string lgashortTitle, string near, string commonName, string remark, bool active, string source, MapDetail mapDetail, AddressBook address, DateTimeOffset? dateAdded)
        {
            if(string.IsNullOrWhiteSpace(localGovernmentArea))
                throw new ArgumentException("Must include a value for Local Government Area");
            if(string.IsNullOrWhiteSpace(lgashortTitle))
                throw new ArgumentException("Must include a value for Lgashort Title");
            if(string.IsNullOrWhiteSpace(near))
                throw new ArgumentException("Must include a value for Near");
            if(string.IsNullOrWhiteSpace(commonName))
                throw new ArgumentException("Must include a value for Common Name");
            if(string.IsNullOrWhiteSpace(remark))
                throw new ArgumentException("Must include a value for Remark");
            if(string.IsNullOrWhiteSpace(source))
                throw new ArgumentException("Must include a value for Source");
            PersonId = personId;
            EventId = eventId;
            StateId = stateId;
            AddressTypeId = addressTypeId;
            LocalGovernmentArea = localGovernmentArea;
            LgashortTitle = lgashortTitle;
            Near = near;
            CommonName = commonName;
            Remark = remark;
            Active = active;
            Source = source;
            MapDetail = mapDetail;
            Address = address;
            DateAdded = dateAdded;
        }

    }
}

file[132] = Domain\PersonAddress.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class PersonAddress
    {
        public int Id { get; private set; }

        public int PersonId { get; private set; }

        public int EventId { get; private set; }

        public int StateId { get; private set; }

        public int AddressTypeId { get; private set; }

        public string LocalGovernmentArea { get; private set; }

        public string LgashortTitle { get; private set; }

        public string Near { get; private set; }

        public string CommonName { get; private set; }

        public string Remark { get; private set; }

        public bool Active { get; private set; }

        public string Source { get; private set; }

        public MapDetail MapDetail { get; private set; }

        public AddressBook Address { get; private set; }

        public DateTimeOffset? DateAdded { get; private set; }
    }
}

file[133] = Domain\PersonContact.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class PersonContact
    {
        public PersonContact(int personId, int eventId, int contactTypeId, string contactValue, DateTimeOffset? dateAdded, bool active, string source)
        {
            if(string.IsNullOrWhiteSpace(contactValue))
                throw new ArgumentException("Must include a value for Contact Value");
            if(string.IsNullOrWhiteSpace(source))
                throw new ArgumentException("Must include a value for Source");
            PersonId = personId;
            EventId = eventId;
            ContactTypeId = contactTypeId;
            ContactValue = contactValue;
            DateAdded = dateAdded;
            Active = active;
            Source = source;
        }

    }
}

file[134] = Domain\PersonContact.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class PersonContact
    {
        public int Id { get; private set; }

        public int PersonId { get; private set; }

        public int EventId { get; private set; }

        public int ContactTypeId { get; private set; }

        public string ContactValue { get; private set; }

        public DateTimeOffset? DateAdded { get; private set; }

        public bool Active { get; private set; }

        public string Source { get; private set; }
    }
}

file[135] = Domain\PersonDetail.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class PersonDetail
    {
        public PersonDetail(int eventId, int personId, string givenName, string familyName, DateTimeOffset? dateOfBirth, string middleName, string gender, bool active, int alertLevel, int associatedAlertLevel, string source, string licenceType, string licenceNumber, string licenceClass, string licenceCondition, bool licenceProduced, DateTimeOffset? licenceEffective, DateTimeOffset? licenceExpiry, string licenceStatus, int licenceStateId, bool internationalLicence, string jurisdiction, string profileImageUrl)
        {
            if(string.IsNullOrWhiteSpace(givenName))
                throw new ArgumentException("Must include a value for Given Name");
            if(string.IsNullOrWhiteSpace(familyName))
                throw new ArgumentException("Must include a value for Family Name");
            if(string.IsNullOrWhiteSpace(middleName))
                throw new ArgumentException("Must include a value for Middle Name");
            if(string.IsNullOrWhiteSpace(gender))
                throw new ArgumentException("Must include a value for Gender");
            if(string.IsNullOrWhiteSpace(source))
                throw new ArgumentException("Must include a value for Source");
            if(string.IsNullOrWhiteSpace(licenceType))
                throw new ArgumentException("Must include a value for Licence Type");
            if(string.IsNullOrWhiteSpace(licenceNumber))
                throw new ArgumentException("Must include a value for Licence Number");
            if(string.IsNullOrWhiteSpace(licenceClass))
                throw new ArgumentException("Must include a value for Licence Class");
            if(string.IsNullOrWhiteSpace(licenceCondition))
                throw new ArgumentException("Must include a value for Licence Condition");
            if(string.IsNullOrWhiteSpace(licenceStatus))
                throw new ArgumentException("Must include a value for Licence Status");
            if(string.IsNullOrWhiteSpace(jurisdiction))
                throw new ArgumentException("Must include a value for Jurisdiction");
            if(string.IsNullOrWhiteSpace(profileImageUrl))
                throw new ArgumentException("Must include a value for Profile Image Url");
            EventId = eventId;
            PersonId = personId;
            GivenName = givenName;
            FamilyName = familyName;
            DateOfBirth = dateOfBirth;
            MiddleName = middleName;
            Gender = gender;
            Active = active;
            AlertLevel = alertLevel;
            AssociatedAlertLevel = associatedAlertLevel;
            Source = source;
            LicenceType = licenceType;
            LicenceNumber = licenceNumber;
            LicenceClass = licenceClass;
            LicenceCondition = licenceCondition;
            LicenceProduced = licenceProduced;
            LicenceEffective = licenceEffective;
            LicenceExpiry = licenceExpiry;
            LicenceStatus = licenceStatus;
            LicenceStateId = licenceStateId;
            InternationalLicence = internationalLicence;
            Jurisdiction = jurisdiction;
            ProfileImageUrl = profileImageUrl;
        }

    }
}

file[136] = Domain\PersonDetail.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class PersonDetail
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int PersonId { get; private set; }

        public string GivenName { get; private set; }

        public string FamilyName { get; private set; }

        public DateTimeOffset? DateOfBirth { get; private set; }

        public string MiddleName { get; private set; }

        public string Gender { get; private set; }

        public bool Active { get; private set; }

        public int AlertLevel { get; private set; }

        public int AssociatedAlertLevel { get; private set; }

        public string Source { get; private set; }

        public string LicenceType { get; private set; }

        public string LicenceNumber { get; private set; }

        public string LicenceClass { get; private set; }

        public string LicenceCondition { get; private set; }

        public bool LicenceProduced { get; private set; }

        public DateTimeOffset? LicenceEffective { get; private set; }

        public DateTimeOffset? LicenceExpiry { get; private set; }

        public string LicenceStatus { get; private set; }

        public int LicenceStateId { get; private set; }

        public bool InternationalLicence { get; private set; }

        public string Jurisdiction { get; private set; }

        public string ProfileImageUrl { get; private set; }
    }
}

file[137] = Domain\Postcode.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class Postcode
    {
        public Postcode(int sourceId, string postcode1, string locality, string state)
        {
            if(string.IsNullOrWhiteSpace(postcode1))
                throw new ArgumentException("Must include a value for Postcode 1");
            if(string.IsNullOrWhiteSpace(locality))
                throw new ArgumentException("Must include a value for Locality");
            if(string.IsNullOrWhiteSpace(state))
                throw new ArgumentException("Must include a value for State");
            SourceId = sourceId;
            Postcode1 = postcode1;
            Locality = locality;
            State = state;
        }

    }
}

file[138] = Domain\Postcode.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class Postcode
    {
        public int Id { get; private set; }

        public int SourceId { get; private set; }

        public string Postcode1 { get; private set; }

        public string Locality { get; private set; }

        public string State { get; private set; }
    }
}

file[139] = Domain\ReferenceDatum.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ReferenceDatum
    {
        public ReferenceDatum(int categoryId, string code, string name, string description, DateTimeOffset? effectFrom, DateTimeOffset? effectTo, int sortOrder, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(code))
                throw new ArgumentException("Must include a value for Code");
            if(string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Must include a value for Name");
            if(string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Must include a value for Description");
            CategoryId = categoryId;
            Code = code;
            Name = name;
            Description = description;
            EffectFrom = effectFrom;
            EffectTo = effectTo;
            SortOrder = sortOrder;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[140] = Domain\ReferenceDatum.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ReferenceDatum
    {
        public int Id { get; private set; }

        public int CategoryId { get; private set; }

        public string Code { get; private set; }

        public string Name { get; private set; }

        public string Description { get; private set; }

        public DateTimeOffset? EffectFrom { get; private set; }

        public DateTimeOffset? EffectTo { get; private set; }

        public int SortOrder { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[141] = Domain\ReferenceDataAttribute.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ReferenceDataAttribute
    {
        public ReferenceDataAttribute(int referenceDataId, string name, string value, int systemId)
        {
            if(string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Must include a value for Name");
            if(string.IsNullOrWhiteSpace(value))
                throw new ArgumentException("Must include a value for Value");
            ReferenceDataId = referenceDataId;
            Name = name;
            Value = value;
            SystemId = systemId;
        }

    }
}

file[142] = Domain\ReferenceDataAttribute.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ReferenceDataAttribute
    {
        public int Id { get; private set; }

        public int ReferenceDataId { get; private set; }

        public string Name { get; private set; }

        public string Value { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[143] = Domain\ReferenceDataCategory.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ReferenceDataCategory
    {
        public ReferenceDataCategory(string code, string name, string description, int sortOrder, bool active, int systemId, bool systemUse)
        {
            if(string.IsNullOrWhiteSpace(code))
                throw new ArgumentException("Must include a value for Code");
            if(string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Must include a value for Name");
            if(string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Must include a value for Description");
            Code = code;
            Name = name;
            Description = description;
            SortOrder = sortOrder;
            Active = active;
            SystemId = systemId;
            SystemUse = systemUse;
        }

    }
}

file[144] = Domain\ReferenceDataCategory.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ReferenceDataCategory
    {
        public int Id { get; private set; }

        public string Code { get; private set; }

        public string Name { get; private set; }

        public string Description { get; private set; }

        public int SortOrder { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }

        public bool SystemUse { get; private set; }
    }
}

file[145] = Domain\ReferenceDataMapping.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ReferenceDataMapping
    {
        public ReferenceDataMapping(int referenceDataId, int referenceDataCategoryId, string sourceValue, int systemId)
        {
            if(string.IsNullOrWhiteSpace(sourceValue))
                throw new ArgumentException("Must include a value for Source Value");
            ReferenceDataId = referenceDataId;
            ReferenceDataCategoryId = referenceDataCategoryId;
            SourceValue = sourceValue;
            SystemId = systemId;
        }

    }
}

file[146] = Domain\ReferenceDataMapping.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ReferenceDataMapping
    {
        public int Id { get; private set; }

        public int ReferenceDataId { get; private set; }

        public int ReferenceDataCategoryId { get; private set; }

        public string SourceValue { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[147] = Domain\Shift.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class Shift
    {
        public Shift(int startTime, DateTimeOffset? endTime, DateTimeOffset? estimatedEndTime, string operation, string remark)
        {
            if(string.IsNullOrWhiteSpace(operation))
                throw new ArgumentException("Must include a value for Operation");
            if(string.IsNullOrWhiteSpace(remark))
                throw new ArgumentException("Must include a value for Remark");
            StartTime = startTime;
            EndTime = endTime;
            EstimatedEndTime = estimatedEndTime;
            Operation = operation;
            Remark = remark;
        }

    }
}

file[148] = Domain\Shift.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class Shift : Aggregate<int>
    {
        public int StartTime { get; private set; }

        public DateTimeOffset? EndTime { get; private set; }

        public DateTimeOffset? EstimatedEndTime { get; private set; }

        public string Operation { get; private set; }

        public string Remark { get; private set; }
    }
}

file[149] = Domain\ShiftOfficer.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class ShiftOfficer
    {
        public ShiftOfficer(int shiftId, int userId, bool active)
        {
            ShiftId = shiftId;
            UserId = userId;
            Active = active;
        }

    }
}

file[150] = Domain\ShiftOfficer.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class ShiftOfficer
    {
        public int Id { get; private set; }

        public int ShiftId { get; private set; }

        public int UserId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[151] = Domain\User.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class User
    {
        public User(string signInName, string firstName, string surname, int userOrganisation, string primaryRole, string actingRole, DateTimeOffset? actingFrom, DateTimeOffset? actingTo, bool isAdmin, bool manageBasicManifest, bool manageAdvancedManifest, DateTimeOffset? effectFrom, DateTimeOffset? effectTo, string authorityNumber, string homeStation, string region, string team, bool active)
        {
            if(string.IsNullOrWhiteSpace(signInName))
                throw new ArgumentException("Must include a value for Sign in Name");
            if(string.IsNullOrWhiteSpace(firstName))
                throw new ArgumentException("Must include a value for First Name");
            if(string.IsNullOrWhiteSpace(surname))
                throw new ArgumentException("Must include a value for Surname");
            if(string.IsNullOrWhiteSpace(primaryRole))
                throw new ArgumentException("Must include a value for Primary Role");
            if(string.IsNullOrWhiteSpace(actingRole))
                throw new ArgumentException("Must include a value for Acting Role");
            if(string.IsNullOrWhiteSpace(authorityNumber))
                throw new ArgumentException("Must include a value for Authority Number");
            if(string.IsNullOrWhiteSpace(homeStation))
                throw new ArgumentException("Must include a value for Home Station");
            if(string.IsNullOrWhiteSpace(region))
                throw new ArgumentException("Must include a value for Region");
            if(string.IsNullOrWhiteSpace(team))
                throw new ArgumentException("Must include a value for Team");
            SignInName = signInName;
            FirstName = firstName;
            Surname = surname;
            UserOrganisation = userOrganisation;
            PrimaryRole = primaryRole;
            ActingRole = actingRole;
            ActingFrom = actingFrom;
            ActingTo = actingTo;
            IsAdmin = isAdmin;
            ManageBasicManifest = manageBasicManifest;
            ManageAdvancedManifest = manageAdvancedManifest;
            EffectFrom = effectFrom;
            EffectTo = effectTo;
            AuthorityNumber = authorityNumber;
            HomeStation = homeStation;
            Region = region;
            Team = team;
            Active = active;
        }

    }
}

file[152] = Domain\User.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class User : Aggregate<int>
    {
        public string SignInName { get; private set; }

        public string FirstName { get; private set; }

        public string Surname { get; private set; }

        public int UserOrganisation { get; private set; }

        public string PrimaryRole { get; private set; }

        public string ActingRole { get; private set; }

        public DateTimeOffset? ActingFrom { get; private set; }

        public DateTimeOffset? ActingTo { get; private set; }

        public bool IsAdmin { get; private set; }

        public bool ManageBasicManifest { get; private set; }

        public bool ManageAdvancedManifest { get; private set; }

        public DateTimeOffset? EffectFrom { get; private set; }

        public DateTimeOffset? EffectTo { get; private set; }

        public string AuthorityNumber { get; private set; }

        public string HomeStation { get; private set; }

        public string Region { get; private set; }

        public string Team { get; private set; }

        public bool Active { get; private set; }
    }
}

file[153] = Domain\Vehicle.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class Vehicle
    {
        public Vehicle(Guid? creationId, States registrationState, string? registrationNumber, bool isNationalRegistration, string? vehicleIdentificationNumber, string? engineNumber, string? chassisNumber, string sourceVehicleId, SourceSystemTypes systemId, bool active)
        {
            if(string.IsNullOrWhiteSpace(sourceVehicleId))
                throw new ArgumentException("Must include a value for Source Vehicle Id");
            CreationId = creationId;
            RegistrationState = registrationState;
            RegistrationNumber = registrationNumber;
            IsNationalRegistration = isNationalRegistration;
            VehicleIdentificationNumber = vehicleIdentificationNumber;
            EngineNumber = engineNumber;
            ChassisNumber = chassisNumber;
            SourceVehicleId = sourceVehicleId;
            SystemId = systemId;
            Active = active;
        }

        public partial void Create(States registrationState, string? registrationNumber, bool isNationalRegistration, string? vehicleIdentificationNumber, string? engineNumber, string? chassisNumber, string sourceVehicleId, SourceSystemTypes systemId)
        {
            // todo: Add Create behaviour here
        }

    }
}

file[154] = Domain\Vehicle.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class Vehicle : Aggregate<int>
    {
        public Guid? CreationId { get; private set; }

        public States RegistrationState { get; private set; }

        public string? RegistrationNumber { get; private set; }

        public bool IsNationalRegistration { get; private set; }

        public string? VehicleIdentificationNumber { get; private set; }

        public string? EngineNumber { get; private set; }

        public string? ChassisNumber { get; private set; }

        public string SourceVehicleId { get; private set; }

        public SourceSystemTypes SystemId { get; private set; }

        public bool Active { get; private set; }

        public partial void Create(States registrationState, string? registrationNumber, bool isNationalRegistration, string? vehicleIdentificationNumber, string? engineNumber, string? chassisNumber, string sourceVehicleId, SourceSystemTypes systemId);
    }
}

file[155] = Domain\VehicleDetail.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class VehicleDetail
    {
        public VehicleDetail(string? vehicleIdentificationNumber, string? engineNumber, string? chassisNumber, States registrationState, string? registrationNumber, string? registrationStatus, bool isNationalRegistration, string sourceVehicleId, SourceSystemTypes systemId)
        {
            if(string.IsNullOrWhiteSpace(sourceVehicleId))
                throw new ArgumentException("Must include a value for Source Vehicle Id");
            VehicleIdentificationNumber = vehicleIdentificationNumber;
            EngineNumber = engineNumber;
            ChassisNumber = chassisNumber;
            RegistrationState = registrationState;
            RegistrationNumber = registrationNumber;
            RegistrationStatus = registrationStatus;
            IsNationalRegistration = isNationalRegistration;
            SourceVehicleId = sourceVehicleId;
            SystemId = systemId;
        }

    }
}

file[156] = Domain\VehicleDetail.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class VehicleDetail
    {
        public int Id { get; private set; }

        public string? VehicleIdentificationNumber { get; private set; }

        public string? EngineNumber { get; private set; }

        public string? ChassisNumber { get; private set; }

        public States RegistrationState { get; private set; }

        public string? RegistrationNumber { get; private set; }

        public string? RegistrationStatus { get; private set; }

        public bool IsNationalRegistration { get; private set; }

        public string SourceVehicleId { get; private set; }

        public SourceSystemTypes SystemId { get; private set; }
    }
}

file[157] = Domain\VehicleFootprint.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class VehicleFootprint
    {
        public VehicleFootprint(decimal latitude, decimal longitude, string direction, DateTimeOffset? sampleTakenOn, int eventId, int vehicleId, string sourceType, string sourceReference, bool active, int systemId, int stateId)
        {
            if(string.IsNullOrWhiteSpace(direction))
                throw new ArgumentException("Must include a value for Direction");
            if(string.IsNullOrWhiteSpace(sourceType))
                throw new ArgumentException("Must include a value for Source Type");
            if(string.IsNullOrWhiteSpace(sourceReference))
                throw new ArgumentException("Must include a value for Source Reference");
            Latitude = latitude;
            Longitude = longitude;
            Direction = direction;
            SampleTakenOn = sampleTakenOn;
            EventId = eventId;
            VehicleId = vehicleId;
            SourceType = sourceType;
            SourceReference = sourceReference;
            Active = active;
            SystemId = systemId;
            StateId = stateId;
        }

    }
}

file[158] = Domain\VehicleFootprint.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class VehicleFootprint
    {
        public int Id { get; private set; }

        public decimal Latitude { get; private set; }

        public decimal Longitude { get; private set; }

        public string Direction { get; private set; }

        public DateTimeOffset? SampleTakenOn { get; private set; }

        public int EventId { get; private set; }

        public int VehicleId { get; private set; }

        public string SourceType { get; private set; }

        public string SourceReference { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }

        public int StateId { get; private set; }
    }
}

file[159] = Domain\VehicleFootprintImport.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class VehicleFootprintImport
    {
        public VehicleFootprintImport(decimal latitude, decimal longitude, string direction, DateTimeOffset? sampleTakenOn, int stateId, string fullAddress, int vehicleRegistrationStateId, string vehicleRegistrationNumber, string sourceType, string sourceReference, string sourceRecordId, bool active, int systemId)
        {
            if(string.IsNullOrWhiteSpace(direction))
                throw new ArgumentException("Must include a value for Direction");
            if(string.IsNullOrWhiteSpace(fullAddress))
                throw new ArgumentException("Must include a value for Full Address");
            if(string.IsNullOrWhiteSpace(vehicleRegistrationNumber))
                throw new ArgumentException("Must include a value for Vehicle Registration Number");
            if(string.IsNullOrWhiteSpace(sourceType))
                throw new ArgumentException("Must include a value for Source Type");
            if(string.IsNullOrWhiteSpace(sourceReference))
                throw new ArgumentException("Must include a value for Source Reference");
            if(string.IsNullOrWhiteSpace(sourceRecordId))
                throw new ArgumentException("Must include a value for Source Record Id");
            Latitude = latitude;
            Longitude = longitude;
            Direction = direction;
            SampleTakenOn = sampleTakenOn;
            StateId = stateId;
            FullAddress = fullAddress;
            VehicleRegistrationStateId = vehicleRegistrationStateId;
            VehicleRegistrationNumber = vehicleRegistrationNumber;
            SourceType = sourceType;
            SourceReference = sourceReference;
            SourceRecordId = sourceRecordId;
            Active = active;
            SystemId = systemId;
        }

    }
}

file[160] = Domain\VehicleFootprintImport.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class VehicleFootprintImport
    {
        public int Id { get; private set; }

        public decimal Latitude { get; private set; }

        public decimal Longitude { get; private set; }

        public string Direction { get; private set; }

        public DateTimeOffset? SampleTakenOn { get; private set; }

        public int StateId { get; private set; }

        public string FullAddress { get; private set; }

        public int VehicleRegistrationStateId { get; private set; }

        public string VehicleRegistrationNumber { get; private set; }

        public string SourceType { get; private set; }

        public string SourceReference { get; private set; }

        public string SourceRecordId { get; private set; }

        public bool Active { get; private set; }

        public int SystemId { get; private set; }
    }
}

file[161] = Domain\VehicleOrganisation.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class VehicleOrganisation
    {
        public VehicleOrganisation(int organisationId, int vehicleId, bool active)
        {
            OrganisationId = organisationId;
            VehicleId = vehicleId;
            Active = active;
        }

    }
}

file[162] = Domain\VehicleOrganisation.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class VehicleOrganisation
    {
        public int Id { get; private set; }

        public int OrganisationId { get; private set; }

        public int VehicleId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[163] = Domain\VehiclePerson.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class VehiclePerson
    {
        public VehiclePerson(int personId, int vehicleId, bool active)
        {
            PersonId = personId;
            VehicleId = vehicleId;
            Active = active;
        }

    }
}

file[164] = Domain\VehiclePerson.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class VehiclePerson
    {
        public int Id { get; private set; }

        public int PersonId { get; private set; }

        public int VehicleId { get; private set; }

        public bool Active { get; private set; }
    }
}

file[165] = Domain\WAEventInspection.cs
// Created using OurPresence.Modeller template 'Domain Class' version 1.0.0
// NOTE: This file cannot be overwritten when regenerated

namespace Nhvr.Rcms.Common.Domain
{
    public partial class WAEventInspection
    {
        public WAEventInspection(int eventId, int wainterceptId, bool dangerousGoodsInspected, bool dangerousGoodsHardCopy, string dangerousGoodsJuroEntry, string dangerousGoodsClassOrDivisionOfDg, string dangerousGoodsProduct, string dangerousGoodsLoadDescriptor, string dangerousGoodsPrimeContractorName, string dangerousGoodsPrimeContractorAddress, string dangerousGoodsPrimeContractorPhone, string dangerousGoodsConsignorName, string dangerousGoodsConsignorAddress, string dangerousGoodsConsignorPhone, string dangerousGoodsInspectionType, bool dangerousGoodsRemediationNoticeIssued, string dangerousGoodsRemediationNoticeNumber, bool dangerousGoodsPhotosAttached, string dangerousGoodsComment, string dangerousGoodsMediaRef, bool vehicleStandardsInspected, bool vehicleStandardsPassed, string vehicleStandardsEquipment, bool massInspected, string massWeighingNoticeMediaRef, string massWeighingNoticeNumber, string massAxleConfiguration, string massWeighingCategory, string massWeighingMethod, bool massBridgeCalibratedZeroed, bool massConformingSite, bool massDriverViewedWeighing, string massOperatorCourseOfTrade, string massDriverStatusToOwner, string massDriverInstructedBy, string massPublicTrade, string massGrossEndAndEnd, string massWitnessName, string massWitnessPhoneNumber, string massComment, int weighingDataStepCount, decimal weighingDataExtremeAxleDistance, decimal weighingDataCombinedWeight, decimal weighingDataDefaultAllowedWeight, decimal weighingDataAllowedWeight, decimal weighingDataMassAdjustment, decimal weighingDataMassAdjustmentPerStep, decimal weighingDataPercentageOfAllowed, string weighingDataPermit, string weighBridgeName, DateTimeOffset? weighBridgeExpiry, DateTimeOffset? weighBridgeConfigureDate, string weighBridgeLocation, bool dimensionsInspected, bool dimensionsPassed, decimal dimensionsHeight, decimal dimensionsWidth, decimal dimensionsLength, decimal dimensionsRearOverhang, string dimensionsProjection, string dimensionsOtherDimension, bool loadRestraintInspected, bool loadRestraintPassed, string loadRestraintNote)
        {
            if(string.IsNullOrWhiteSpace(dangerousGoodsJuroEntry))
                throw new ArgumentException("Must include a value for Dangerous Goods Juro Entry");
            if(string.IsNullOrWhiteSpace(dangerousGoodsClassOrDivisionOfDg))
                throw new ArgumentException("Must include a value for Dangerous Goods Class or Division of Dg");
            if(string.IsNullOrWhiteSpace(dangerousGoodsProduct))
                throw new ArgumentException("Must include a value for Dangerous Goods Product");
            if(string.IsNullOrWhiteSpace(dangerousGoodsLoadDescriptor))
                throw new ArgumentException("Must include a value for Dangerous Goods Load Descriptor");
            if(string.IsNullOrWhiteSpace(dangerousGoodsPrimeContractorName))
                throw new ArgumentException("Must include a value for Dangerous Goods Prime Contractor Name");
            if(string.IsNullOrWhiteSpace(dangerousGoodsPrimeContractorAddress))
                throw new ArgumentException("Must include a value for Dangerous Goods Prime Contractor Address");
            if(string.IsNullOrWhiteSpace(dangerousGoodsPrimeContractorPhone))
                throw new ArgumentException("Must include a value for Dangerous Goods Prime Contractor Phone");
            if(string.IsNullOrWhiteSpace(dangerousGoodsConsignorName))
                throw new ArgumentException("Must include a value for Dangerous Goods Consignor Name");
            if(string.IsNullOrWhiteSpace(dangerousGoodsConsignorAddress))
                throw new ArgumentException("Must include a value for Dangerous Goods Consignor Address");
            if(string.IsNullOrWhiteSpace(dangerousGoodsConsignorPhone))
                throw new ArgumentException("Must include a value for Dangerous Goods Consignor Phone");
            if(string.IsNullOrWhiteSpace(dangerousGoodsInspectionType))
                throw new ArgumentException("Must include a value for Dangerous Goods Inspection Type");
            if(string.IsNullOrWhiteSpace(dangerousGoodsRemediationNoticeNumber))
                throw new ArgumentException("Must include a value for Dangerous Goods Remediation Notice Number");
            if(string.IsNullOrWhiteSpace(dangerousGoodsComment))
                throw new ArgumentException("Must include a value for Dangerous Goods Comment");
            if(string.IsNullOrWhiteSpace(dangerousGoodsMediaRef))
                throw new ArgumentException("Must include a value for Dangerous Goods Media Ref");
            if(string.IsNullOrWhiteSpace(vehicleStandardsEquipment))
                throw new ArgumentException("Must include a value for Vehicle Standards Equipment");
            if(string.IsNullOrWhiteSpace(massWeighingNoticeMediaRef))
                throw new ArgumentException("Must include a value for Mass Weighing Notice Media Ref");
            if(string.IsNullOrWhiteSpace(massWeighingNoticeNumber))
                throw new ArgumentException("Must include a value for Mass Weighing Notice Number");
            if(string.IsNullOrWhiteSpace(massAxleConfiguration))
                throw new ArgumentException("Must include a value for Mass Axle Configuration");
            if(string.IsNullOrWhiteSpace(massWeighingCategory))
                throw new ArgumentException("Must include a value for Mass Weighing Category");
            if(string.IsNullOrWhiteSpace(massWeighingMethod))
                throw new ArgumentException("Must include a value for Mass Weighing Method");
            if(string.IsNullOrWhiteSpace(massOperatorCourseOfTrade))
                throw new ArgumentException("Must include a value for Mass Operator Course of Trade");
            if(string.IsNullOrWhiteSpace(massDriverStatusToOwner))
                throw new ArgumentException("Must include a value for Mass Driver Status to Owner");
            if(string.IsNullOrWhiteSpace(massDriverInstructedBy))
                throw new ArgumentException("Must include a value for Mass Driver Instructed by");
            if(string.IsNullOrWhiteSpace(massPublicTrade))
                throw new ArgumentException("Must include a value for Mass Public Trade");
            if(string.IsNullOrWhiteSpace(massGrossEndAndEnd))
                throw new ArgumentException("Must include a value for Mass Gross End and End");
            if(string.IsNullOrWhiteSpace(massWitnessName))
                throw new ArgumentException("Must include a value for Mass Witness Name");
            if(string.IsNullOrWhiteSpace(massWitnessPhoneNumber))
                throw new ArgumentException("Must include a value for Mass Witness Phone Number");
            if(string.IsNullOrWhiteSpace(massComment))
                throw new ArgumentException("Must include a value for Mass Comment");
            if(string.IsNullOrWhiteSpace(weighingDataPermit))
                throw new ArgumentException("Must include a value for Weighing Data Permit");
            if(string.IsNullOrWhiteSpace(weighBridgeName))
                throw new ArgumentException("Must include a value for Weigh Bridge Name");
            if(string.IsNullOrWhiteSpace(weighBridgeLocation))
                throw new ArgumentException("Must include a value for Weigh Bridge Location");
            if(string.IsNullOrWhiteSpace(dimensionsProjection))
                throw new ArgumentException("Must include a value for Dimensions Projection");
            if(string.IsNullOrWhiteSpace(dimensionsOtherDimension))
                throw new ArgumentException("Must include a value for Dimensions Other Dimension");
            if(string.IsNullOrWhiteSpace(loadRestraintNote))
                throw new ArgumentException("Must include a value for Load Restraint Note");
            EventId = eventId;
            WainterceptId = wainterceptId;
            DangerousGoodsInspected = dangerousGoodsInspected;
            DangerousGoodsHardCopy = dangerousGoodsHardCopy;
            DangerousGoodsJuroEntry = dangerousGoodsJuroEntry;
            DangerousGoodsClassOrDivisionOfDg = dangerousGoodsClassOrDivisionOfDg;
            DangerousGoodsProduct = dangerousGoodsProduct;
            DangerousGoodsLoadDescriptor = dangerousGoodsLoadDescriptor;
            DangerousGoodsPrimeContractorName = dangerousGoodsPrimeContractorName;
            DangerousGoodsPrimeContractorAddress = dangerousGoodsPrimeContractorAddress;
            DangerousGoodsPrimeContractorPhone = dangerousGoodsPrimeContractorPhone;
            DangerousGoodsConsignorName = dangerousGoodsConsignorName;
            DangerousGoodsConsignorAddress = dangerousGoodsConsignorAddress;
            DangerousGoodsConsignorPhone = dangerousGoodsConsignorPhone;
            DangerousGoodsInspectionType = dangerousGoodsInspectionType;
            DangerousGoodsRemediationNoticeIssued = dangerousGoodsRemediationNoticeIssued;
            DangerousGoodsRemediationNoticeNumber = dangerousGoodsRemediationNoticeNumber;
            DangerousGoodsPhotosAttached = dangerousGoodsPhotosAttached;
            DangerousGoodsComment = dangerousGoodsComment;
            DangerousGoodsMediaRef = dangerousGoodsMediaRef;
            VehicleStandardsInspected = vehicleStandardsInspected;
            VehicleStandardsPassed = vehicleStandardsPassed;
            VehicleStandardsEquipment = vehicleStandardsEquipment;
            MassInspected = massInspected;
            MassWeighingNoticeMediaRef = massWeighingNoticeMediaRef;
            MassWeighingNoticeNumber = massWeighingNoticeNumber;
            MassAxleConfiguration = massAxleConfiguration;
            MassWeighingCategory = massWeighingCategory;
            MassWeighingMethod = massWeighingMethod;
            MassBridgeCalibratedZeroed = massBridgeCalibratedZeroed;
            MassConformingSite = massConformingSite;
            MassDriverViewedWeighing = massDriverViewedWeighing;
            MassOperatorCourseOfTrade = massOperatorCourseOfTrade;
            MassDriverStatusToOwner = massDriverStatusToOwner;
            MassDriverInstructedBy = massDriverInstructedBy;
            MassPublicTrade = massPublicTrade;
            MassGrossEndAndEnd = massGrossEndAndEnd;
            MassWitnessName = massWitnessName;
            MassWitnessPhoneNumber = massWitnessPhoneNumber;
            MassComment = massComment;
            WeighingDataStepCount = weighingDataStepCount;
            WeighingDataExtremeAxleDistance = weighingDataExtremeAxleDistance;
            WeighingDataCombinedWeight = weighingDataCombinedWeight;
            WeighingDataDefaultAllowedWeight = weighingDataDefaultAllowedWeight;
            WeighingDataAllowedWeight = weighingDataAllowedWeight;
            WeighingDataMassAdjustment = weighingDataMassAdjustment;
            WeighingDataMassAdjustmentPerStep = weighingDataMassAdjustmentPerStep;
            WeighingDataPercentageOfAllowed = weighingDataPercentageOfAllowed;
            WeighingDataPermit = weighingDataPermit;
            WeighBridgeName = weighBridgeName;
            WeighBridgeExpiry = weighBridgeExpiry;
            WeighBridgeConfigureDate = weighBridgeConfigureDate;
            WeighBridgeLocation = weighBridgeLocation;
            DimensionsInspected = dimensionsInspected;
            DimensionsPassed = dimensionsPassed;
            DimensionsHeight = dimensionsHeight;
            DimensionsWidth = dimensionsWidth;
            DimensionsLength = dimensionsLength;
            DimensionsRearOverhang = dimensionsRearOverhang;
            DimensionsProjection = dimensionsProjection;
            DimensionsOtherDimension = dimensionsOtherDimension;
            LoadRestraintInspected = loadRestraintInspected;
            LoadRestraintPassed = loadRestraintPassed;
            LoadRestraintNote = loadRestraintNote;
        }

    }
}

file[166] = Domain\WAEventInspection.generated.cs
// Auto-generated using OurPresence.Modeller template 'Domain Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Domain
{
    partial class WAEventInspection
    {
        public int Id { get; private set; }

        public int EventId { get; private set; }

        public int WainterceptId { get; private set; }

        public bool DangerousGoodsInspected { get; private set; }

        public bool DangerousGoodsHardCopy { get; private set; }

        public string DangerousGoodsJuroEntry { get; private set; }

        public string DangerousGoodsClassOrDivisionOfDg { get; private set; }

        public string DangerousGoodsProduct { get; private set; }

        public string DangerousGoodsLoadDescriptor { get; private set; }

        public string DangerousGoodsPrimeContractorName { get; private set; }

        public string DangerousGoodsPrimeContractorAddress { get; private set; }

        public string DangerousGoodsPrimeContractorPhone { get; private set; }

        public string DangerousGoodsConsignorName { get; private set; }

        public string DangerousGoodsConsignorAddress { get; private set; }

        public string DangerousGoodsConsignorPhone { get; private set; }

        public string DangerousGoodsInspectionType { get; private set; }

        public bool DangerousGoodsRemediationNoticeIssued { get; private set; }

        public string DangerousGoodsRemediationNoticeNumber { get; private set; }

        public bool DangerousGoodsPhotosAttached { get; private set; }

        public string DangerousGoodsComment { get; private set; }

        public string DangerousGoodsMediaRef { get; private set; }

        public bool VehicleStandardsInspected { get; private set; }

        public bool VehicleStandardsPassed { get; private set; }

        public string VehicleStandardsEquipment { get; private set; }

        public bool MassInspected { get; private set; }

        public string MassWeighingNoticeMediaRef { get; private set; }

        public string MassWeighingNoticeNumber { get; private set; }

        public string MassAxleConfiguration { get; private set; }

        public string MassWeighingCategory { get; private set; }

        public string MassWeighingMethod { get; private set; }

        public bool MassBridgeCalibratedZeroed { get; private set; }

        public bool MassConformingSite { get; private set; }

        public bool MassDriverViewedWeighing { get; private set; }

        public string MassOperatorCourseOfTrade { get; private set; }

        public string MassDriverStatusToOwner { get; private set; }

        public string MassDriverInstructedBy { get; private set; }

        public string MassPublicTrade { get; private set; }

        public string MassGrossEndAndEnd { get; private set; }

        public string MassWitnessName { get; private set; }

        public string MassWitnessPhoneNumber { get; private set; }

        public string MassComment { get; private set; }

        public int WeighingDataStepCount { get; private set; }

        public decimal WeighingDataExtremeAxleDistance { get; private set; }

        public decimal WeighingDataCombinedWeight { get; private set; }

        public decimal WeighingDataDefaultAllowedWeight { get; private set; }

        public decimal WeighingDataAllowedWeight { get; private set; }

        public decimal WeighingDataMassAdjustment { get; private set; }

        public decimal WeighingDataMassAdjustmentPerStep { get; private set; }

        public decimal WeighingDataPercentageOfAllowed { get; private set; }

        public string WeighingDataPermit { get; private set; }

        public string WeighBridgeName { get; private set; }

        public DateTimeOffset? WeighBridgeExpiry { get; private set; }

        public DateTimeOffset? WeighBridgeConfigureDate { get; private set; }

        public string WeighBridgeLocation { get; private set; }

        public bool DimensionsInspected { get; private set; }

        public bool DimensionsPassed { get; private set; }

        public decimal DimensionsHeight { get; private set; }

        public decimal DimensionsWidth { get; private set; }

        public decimal DimensionsLength { get; private set; }

        public decimal DimensionsRearOverhang { get; private set; }

        public string DimensionsProjection { get; private set; }

        public string DimensionsOtherDimension { get; private set; }

        public bool LoadRestraintInspected { get; private set; }

        public bool LoadRestraintPassed { get; private set; }

        public string LoadRestraintNote { get; private set; }
    }
}

file[167] = Enums\AddressType.generated.cs
// Auto-generated using OurPresence.Modeller template 'Enum Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Enums
{
    public enum AddressTypes
    {
        RegisteredAddress = 120,
        PostalAddress = 121,
        GaragingAddress = 122,
        NoticeAddress = 123,
        LastKnownAddress = 124,
    }
}

file[168] = Enums\State.generated.cs
// Auto-generated using OurPresence.Modeller template 'Enum Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Enums
{
    public enum States
    {
        [Display(Name = "Australian Capitol Territory")]
        ACT = 60,
        [Display(Name = "Western Australia")]
        WA = 61,
        [Display(Name = "South Australia")]
        SA = 62,
        [Display(Name = "Northern Territory")]
        NT = 63,
        [Display(Name = "Victoria")]
        VIC = 64,
        [Display(Name = "Queensland")]
        QLD = 65,
        [Display(Name = "New South Wales")]
        NSW = 66,
        [Display(Name = "Tasmania")]
        TAS = 67,
    }
}

file[169] = Enums\SourceSystemType.generated.cs
// Auto-generated using OurPresence.Modeller template 'Enum Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Enums
{
    public enum SourceSystemTypes
    {
        RCMS = 30,
        NHVR = 31,
        VCOM = 32,
        INTERCEPT = 33,
        VICROADSNHVR = 34,
        VICROADS = 35,
        ASIC = 36,
        NEVDIS = 37,
        QLDTMR = 38,
        NEVDISSERVICE = 39,
    }
}

file[170] = Enums\OrganisationType.generated.cs
// Auto-generated using OurPresence.Modeller template 'Enum Class' version 1.0.0

// --------------------------------------------------------------------------------
// WARNING: This file will be overwritten if re-generation is triggered.
// --------------------------------------------------------------------------------

#nullable enable

namespace Nhvr.Rcms.Common.Enums
{
    public enum OrganisationTypes
    {
        Company = 130,
        IncorporatedAssociation = 131,
        GovernmentDepartment = 132,
        GovernmentBusinessEnterprise = 133,
        LocalGovernment = 134,
        Association = 139,
    }
}

