file[0] = Mizrael.SuperSafeBank.Application.csproj
<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net5.0</TargetFramework>
        <RootNamespace>Mizrael.SuperSafeBank.Application</RootNamespace>
        <LangVersion>Preview</LangVersion>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="FluentValidation.AspNetCore" Version="10.3.0" />
        <PackageReference Include="MediatR.Extensions.Microsoft.DependencyInjection" Version="9.0.0" />
        <PackageReference Include="Swashbuckle.AspNetCore" Version="6.1.4" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\Mizrael.SuperSafeBank.BusinessLogic\Mizrael.SuperSafeBank.BusinessLogic.csproj" />
        <ProjectReference Include="..\Mizrael.SuperSafeBank.Common\Mizrael.SuperSafeBank.Common.csproj" />
    </ItemGroup>

</Project>

file[1] = Program.cs
namespace Mizrael.SuperSafeBank.Application
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}

file[2] = appsettings.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}

file[3] = Startup.cs
using Mizrael.SuperSafeBank.BusinessLogic.Account.Withdraw;
using Mizrael.SuperSafeBank.BusinessLogic.Account.Validators;

namespace Mizrael.SuperSafeBank.Application
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMediatR(typeof(AccountWithdrawRequest).Assembly);

            services.AddControllers()
                .ConfigureApiBehaviorOptions(options =>
                {
                    options.InvalidModelStateResponseFactory = ModelStateValidator.ValidateModelState;
                })
                .AddFluentValidation(options =>
                {
                    options.RegisterValidatorsFromAssemblyContaining<AccountWithdrawRequestValidator>();
                });

            //todo: Add your service registrations here

            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "Mizrael Super Safe Bank", Version = "v1" });
            });
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "Mizrael Super Safe Bank v1"));
            }

            app.UseMiddleware<ExceptionHandler>();
            app.UseHttpsRedirection();
            app.UseRouting();
            app.UseAuthorization();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }

    public class ModelStateValidator
    {
        public static IActionResult ValidateModelState(ActionContext context)
        {
            (string fieldName, ModelStateEntry entry) = context.ModelState.First(x => x.Value.Errors.Count > 0);
            string errorSerialized = entry.Errors.First().ErrorMessage;

            Error error = Error.Deserialize(errorSerialized);
            Envelope envelope = Envelope.Error(error, fieldName);
            var envelopeResult = new EnvelopeResult(envelope, HttpStatusCode.BadRequest);

            return envelopeResult;
        }
    }
}

file[4] = usings.generated.cs
global using System;
global using System.Collections.Generic;
global using System.Linq;
global using System.Threading.Tasks;
global using System.Net;
global using System.Text.Json;
global using CSharpFunctionalExtensions;
global using FluentValidation.AspNetCore;
global using MediatR;
global using Microsoft.AspNetCore.Authorization;
global using Microsoft.AspNetCore.Builder;
global using Microsoft.AspNetCore.Hosting;
global using Microsoft.AspNetCore.Http;
global using Microsoft.AspNetCore.Mvc;
global using Microsoft.AspNetCore.Mvc.ModelBinding;
global using Microsoft.Extensions.Configuration;
global using Microsoft.Extensions.DependencyInjection;
global using Microsoft.Extensions.Hosting;
global using Microsoft.OpenApi.Models;

global using Mizrael.SuperSafeBank.Common;

file[5] = ExceptionHandler.cs
namespace Mizrael.SuperSafeBank.Application
{
    public sealed class ExceptionHandler
    {
        private readonly RequestDelegate _next;
        private readonly IWebHostEnvironment _env;

        public ExceptionHandler(RequestDelegate next, IWebHostEnvironment env)
        {
            _next = next;
            _env = env;
        }

        public async Task Invoke(HttpContext context)
        {
            try
            {
                await _next(context);
            }
            catch (Exception ex)
            {
                await HandleException(context, ex);
            }
        }

        private Task HandleException(HttpContext context, Exception exception)
        {
            string errorMessage = _env.IsProduction() ? "Internal server error" : "Exception: " + exception.Message;
            Error error = Errors.General.InternalServerError(errorMessage);
            Envelope envelope = Envelope.Error(error, null);
            string result = JsonSerializer.Serialize(envelope);

            context.Response.ContentType = "application/json";
            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
            return context.Response.WriteAsync(result);
        }
    }
}

file[6] = Envelop.cs
namespace Mizrael.SuperSafeBank.Application
{
    public class Envelope
    {
        public object? Result { get; }
        public string? ErrorCode { get; }
        public string? ErrorMessage { get; }
        public string? InvalidField { get; }
        public DateTime TimeGenerated { get; }

        private Envelope(object? result, Error? error, string? invalidField)
        {
            Result = result;
            ErrorCode = error?.Code;
            ErrorMessage = error?.Message;
            InvalidField = invalidField;
            TimeGenerated = DateTime.UtcNow;
        }

        public static Envelope Ok(object? result = null)
        {
            return new Envelope(result, null, null);
        }

        public static Envelope Error(Error error, string? invalidField)
        {
            return new Envelope(null, error, invalidField);
        }
    }
}

file[7] = EnvelopResult.cs
namespace Mizrael.SuperSafeBank.Application
{
    public sealed class EnvelopeResult : IActionResult
    {
        private readonly Envelope _envelope;
        private readonly int _statusCode;

        public EnvelopeResult(Envelope envelope, HttpStatusCode statusCode)
        {
            _statusCode = (int)statusCode;
            _envelope = envelope;
        }

        public Task ExecuteResultAsync(ActionContext context)
        {
            var objectResult = new ObjectResult(_envelope)
            {
                StatusCode = _statusCode
            };
            return objectResult.ExecuteResultAsync(context);
        }
    }
}

file[8] = Controllers\ApplicationController.cs
namespace Mizrael.SuperSafeBank.Application.Controllers
{
    [ApiController]
    public abstract class ApplicationController : ControllerBase
    {
        protected new IActionResult Ok(object? result = null)
        {
            return new EnvelopeResult(Envelope.Ok(result), HttpStatusCode.OK);
        }

        protected IActionResult NotFound(Error error, string? invalidField = null)
        {
            return new EnvelopeResult(Envelope.Error(error, invalidField), HttpStatusCode.NotFound);
        }

        protected IActionResult Error(Error error, string? invalidField = null)
        {
            return new EnvelopeResult(Envelope.Error(error, invalidField), HttpStatusCode.BadRequest);
        }

        protected IActionResult FromResult(Result result)
        {
            return result.IsSuccess ? Ok() : Error(Errors.General.InternalServerError(GetType().Name), result.Error);
        }

        protected IActionResult FromResult<T>(Result<T> result)
        {
            return result.IsSuccess ? Ok(result.Value) : Error(Errors.General.InternalServerError(GetType().Name), result.Error);
        }

        protected IActionResult FromResult<T>(Result<T, Error> result)
        {
            return result.IsSuccess ? Ok(result.Value) : Error(result.Error);
        }
    }
}

